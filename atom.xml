<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://jumpalang.5a1.xyz</id>
    <title>Jump!Alang</title>
    <updated>2019-08-11T16:17:43.222Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://jumpalang.5a1.xyz"/>
    <link rel="self" href="http://jumpalang.5a1.xyz/atom.xml"/>
    <logo>http://jumpalang.5a1.xyz/images/avatar.png</logo>
    <icon>http://jumpalang.5a1.xyz/favicon.ico</icon>
    <rights>All rights reserved 2019, Jump!Alang</rights>
    <entry>
        <title type="html"><![CDATA[冒泡、选择、插入、快速排序JAVA算法]]></title>
        <id>http://jumpalang.5a1.xyz/post/mou-pao-xuan-ze-cha-ru-kuai-su-pai-xu-java-suan-fa</id>
        <link href="http://jumpalang.5a1.xyz/post/mou-pao-xuan-ze-cha-ru-kuai-su-pai-xu-java-suan-fa">
        </link>
        <updated>2019-08-11T10:01:44.000Z</updated>
        <summary type="html"><![CDATA[<p>熟能生巧！</p>
]]></summary>
        <content type="html"><![CDATA[<p>熟能生巧！</p>
<!-- more -->
<h1 id="冒泡-选择-插入">冒泡、选择、插入</h1>
<pre><code class="language-java">public class OrdinarySortRepeat {
    public static void main(String[] args) {
        int[] arr = getRandomInts(10);
        int[] arr2 = Arrays.copyOf(arr,10);
        int[] arr3 = Arrays.copyOf(arr,10);
        int[] arr4 = Arrays.copyOf(arr,10);
        System.out.println(&quot;origin:&quot;+Arrays.toString(arr));
        bubbleSort(arr);
        System.out.println(&quot;bubbleSort:&quot;+Arrays.toString(arr));
        selectSort(arr2);
        System.out.println(&quot;selectSort:&quot;+Arrays.toString(arr2));
        insertSort(arr3);
        System.out.println(&quot;insertSort:&quot;+Arrays.toString(arr3));
        insertSort2(arr4);
        System.out.println(&quot;insertSort2:&quot;+Arrays.toString(arr4));
    }
    public static int[] getRandomInts(int length){
        int[] numbers = new int[length];
        Random random = new Random();
        for (int i = 0; i &lt; length; i++) {
            numbers[i] = random.nextInt(9999);
        }
        return numbers;
    }

    public static void swap(int[] arr, int a, int b){
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static void bubbleSort(int[] arr){
        for(int i = 0; i &lt; arr.length-1; i++){
            boolean isNoSorted = true;
            for(int j = 0; j &lt; arr.length-i-1; j++){
                if(arr[j] &gt; arr[j+1]){
                    swap(arr,j,j+1);
                    isNoSorted = false;
                }
            }
            if(isNoSorted){
                return;
            }
        }
    }

    public static void selectSort(int[] arr){
        for(int i = 0; i &lt; arr.length-1; i++){
            for(int j = i+1; j &lt; arr.length;j++){
                if(arr[i] &gt; arr[j]){
                    swap(arr,i,j);
                }
            }
        }
    }

    public static void insertSort(int[] arr){
        for(int i = 1; i &lt; arr.length; i++){
            int temp = arr[i];
            int j = i-1;
            while(j &gt;= 0 &amp;&amp; arr[j] &gt; temp){
                arr[j+1] = arr[j];
                j--;
            }
            arr[j+1] = temp;
        }
    }

    public static void insertSort2(int[] arr){
        for(int i = 1;i &lt; arr.length; i++){
            int temp = arr[i];
            int j;
            for(j = i-1; j &gt;= 0; j--){
                if(arr[j] &gt; temp){
                    arr[j+1] = arr[j];
                }else{
                    break;
                }
            }
            arr[j+1] = temp;
        }
    }
}

</code></pre>
<h1 id="快速排序">快速排序</h1>
<pre><code class="language-java">public class QuickSortRepeat {
    public static void main(String[] args) {
        int[] arr = getRandomInts(10);
        int[] arr2 = Arrays.copyOf(arr,10);
        int[] arr3 = Arrays.copyOf(arr,10);
        int[] arr4 = Arrays.copyOf(arr,10);
        System.out.println(&quot;origin:&quot;+Arrays.toString(arr));
        quickSort(arr,0,arr.length-1);
        System.out.println(&quot;quickSort:&quot;+Arrays.toString(arr));
        quickSort2(arr2,0,arr.length-1);
        System.out.println(&quot;quickSort2:&quot;+ Arrays.toString(arr2));
        quickSort3(arr3,0,arr.length-1);
        System.out.println(&quot;quickSort3:&quot;+Arrays.toString(arr3));
        quickSort4(arr4,0,arr.length-1);
        System.out.println(&quot;quickSort4:&quot;+Arrays.toString(arr4));
    }
    public static int[] getRandomInts(int length){
        int[] numbers = new int[length];
        Random random = new Random();
        for (int i = 0; i &lt; length; i++) {
            numbers[i] = random.nextInt(9999);
        }
        return numbers;
    }

    public static void swap(int[] arr, int a, int b){
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    /**
     * 根据阮一峰博客：http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html
     * @param arr
     * @param left
     * @param right
     */
    public static void quickSort(int[] arr, int left, int right){
        if(left &gt;= right){
            return;
        }
        int standard = arr[left];
        int index = left;
        for(int i = left+1; i &lt;= right; i++){
            if(arr[i] &lt; standard){
                arr[index] = arr[i];
                for(int j = i-1; j &gt; index;j--){
                    arr[j+1] = arr[j];
                }
                arr[++index] = standard;
            }
        }
        quickSort(arr,left,index-1);
        quickSort(arr,index+1,right);
    }

    /**
     * 根据马桶上看算法：http://developer.51cto.com/art/201403/430986.htm
     * @param arr
     * @param left
     * @param right
     */
    public static void quickSort2(int[] arr,int left, int right){
        if(left &gt;= right){
            return;
        }
        int standard = arr[left];
        int i = left;
        int j = right;
        while(i &lt; j){
            while(i &lt; j &amp;&amp; arr[j] &gt;= standard){
                j--;
            }
            while(i &lt; j &amp;&amp; arr[i] &lt;= standard){
                i++;
            }
            if(i &lt; j){
                swap(arr,i,j);
            }else{
                break;
            }
        }
        if(i != left){
            arr[left] = arr[i];
            arr[i] = standard;
        }

        quickSort2(arr,left,i-1);
        quickSort2(arr,i+1,right);
    }

    /**
     * 根据博客园：https://www.cnblogs.com/coderising/p/5708801.html
     * @param arr
     * @param left
     * @param right
     */
    public static void quickSort3(int[] arr, int left, int right){
        if(left &gt;= right){
            return;
        }
        int standard = arr[left];
        int i = left;
        int j = right;
        while(i &lt; j){
            while(i &lt; j &amp;&amp; arr[j] &gt;= standard){
                j--;
            }
            arr[i] = arr[j];
            while(i &lt; j &amp;&amp; arr[i] &lt;= standard){
                i++;
            }
            arr[j] = arr[i];
        }
        arr[i] = standard;
        quickSort3(arr,left,i-1);
        quickSort3(arr,i+1,right);
    }

    /**
     * 同上，对quickSort3进行优化(三数取中)，也是根据博客园：https://www.cnblogs.com/coderising/p/5708801.html
     * @param arr
     * @param left
     * @param right
     */
    public static void quickSort4(int[] arr, int left, int right){
        if(left &gt;= right){
            return;
        }
        int mid = (left+right)/2;
        if(arr[right] &lt; arr[left]){
            swap(arr,left,right);
        }
        if(arr[right] &lt; arr[mid]){
            swap(arr,mid,right);
        }
        if(arr[left] &lt; arr[mid]){
            swap(arr,left,mid);
        }
        int standard = arr[left];
        int i = left;
        int j = right;
        while(i &lt; j){
            while(i &lt; j &amp;&amp; arr[j] &gt;= standard){
                j--;
            }
            arr[i] = arr[j];
            while(i &lt; j &amp;&amp; arr[i] &lt;= standard){
                i++;
            }
            arr[j] = arr[i];
        }
        arr[i] = standard;
        quickSort3(arr,left,i-1);
        quickSort3(arr,i+1,right);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA面试题]]></title>
        <id>http://jumpalang.5a1.xyz/post/java-mian-shi-ti</id>
        <link href="http://jumpalang.5a1.xyz/post/java-mian-shi-ti">
        </link>
        <updated>2019-08-11T05:12:42.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>机会是留给有准备的人！</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>机会是留给有准备的人！</p>
</blockquote>
<!-- more -->
<ol>
<li>
<p>简单说下什么是跨平台？<br>
由于各种操作系统指令集不是完全一致的，所有在操作系统之上加个虚拟机可以来提供统一接口，屏蔽系统之间的差异。</p>
</li>
<li>
<p>java有几种基本数据类型</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">8</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">4</td>
<td style="text-align:center">0.0f</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">8</td>
<td style="text-align:center">0.0d</td>
</tr>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">2</td>
<td style="text-align:center">'\u0000'</td>
</tr>
<tr>
<td style="text-align:center"><em><strong>boolean</strong></em></td>
<td style="text-align:center">4</td>
<td style="text-align:center">false</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>ArratList和LinkedList区别<br>
ArrayList是基于动态数组的数据结构，LinkedList是基于链表的数据结构。<br>
对于随机访问get和set,ArrayList优于LinkedList,因为LinkedList要移动指针。<br>
对于新增和删除add和remove，LinkedList优于ArrayList，因为ArrayList要移动数据。</p>
</li>
<li>
<p>ConncurrentModificationException异常出现的原因</p>
<pre><code class="language-java">  public class Test{
 	 public static void main(String[] args){
 		 ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
 		 list.add(2);
 		 Iterator&lt;Integer&gt; ite = list.iterator();
 		 while(ite.hasNext()){
 			 Integer integer = ite.next();
 			 if(integer == 2){
 				 list.remove(integer);
 			 }
 		 }
 	 }
  }
</code></pre>
<p>执行上段代码是有问题的，会抛出<code>ConcurrentModification</code>异常。<br>
<strong>原因</strong>：调用list.remove()方法导致modCount和expectedModeCount的值不一致。</p>
<pre><code class="language-java">final void checkForComodication(){
    if(modCount != expectedModCount
   	 throw new ConcurrentModification();
}
</code></pre>
<p><strong>解决方法</strong>：在迭代器中如果要删除元素的话，需要调用Iterator类的remove方法。</p>
<pre><code class="language-java">public class Test{
    public static void main(String[] args){
   	 ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
   	 list.add(2);
   	 Iterator&lt;Integer&gt; ite = list.iterator();
   	 while(ite.hasNext()){
   		 Integer integer = ite.next();
   		 if(integer == 2){
   			 ite.remove();//注意这个地方
   		 }
   	 }
    }
} 
</code></pre>
</li>
<li>
<p>String、StringBuffer和StringBuilder区别</p>
<ol>
<li>数据可变和不可变<br>
<code>String</code>底层使用一个不可变的字符数组private final char value[];所以它内容不可变；<br>
<code>StringBuffer</code>和<code>StringBuilder</code>都继承了<code>AbstractStringBuilder</code>底层使用的是可变字符数组：<code>char[] value</code>;</li>
<li>线程安全<br>
<code>StringBuilder</code>是线程不安全的，效率较高；而StringBuffer是线程安全的，效率较低。<br>
通过他们的<code>append()</code>方法来看，<code>StringBuffer</code>是有同步锁，而StringBuilder没有：</li>
</ol>
<pre><code class="language-java">@Override
public sychronized StringBuffer append(Object obj){
	toStringCache = null;
	super.append(String.valueOf(obj));
	return this;
}

@Override
public StringBuilder append(String str){
	super.append(str);
	return this;
}
</code></pre>
<ol start="3">
<li>相同点<br>
<code>StringBuilder</code>与<code>StringBuffer</code>有公共父类`AbstractStringBuilder'。</li>
</ol>
<p>最后，操作可变字符速度：<code>StringBuilder &gt; StringBuffer &gt; String</code>。</p>
</li>
<li>
<p>HashMap和HashTable、ConcurrentHashMap区别？<br>
相同点：<br>
1.HashMap和HashTable都实现Map接口<br>
2.都可以存储key-value数据<br>
不同点：<br>
1.HashMap可以将null作为key或value，HashTable不可以。<br>
2.HashMap是线程不安全，效率高，HashTable是线程安全，效率低。<br>
3.HashMap的迭代器(Iterator)是fail-fast迭代器,而HashTable的迭代器(enumerator)不是fail-fast。</p>
<blockquote>
<p>fail-fast:就是就快的时间能把错误抛出而不是让程序执行。</p>
</blockquote>
<p>如何保证线程安全又效率高？<br>
Java5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。<br>
我们能否让HashMap同步？<br>
HashMap可以通过下面的语句进行同步：<br>
<code>Map m = Collections.sychronizeMap(hashMap);</code></p>
</li>
<li>
<p>线程创建方式</p>
<ol>
<li>继承Thread类，作为线程对象存在(继承Thread对象)</li>
</ol>
<pre><code class="language-java">public class CreatThreadDemo1 extends Thread{
/**
 * 构造方法： 继承父类方法的Thread(String name)；方法
 * @param name
 */
public CreatThreadDemo1(String name){
    super(name);
}

@Override
public void run() {
    while (!interrupted()){
        System.out.println(getName()+&quot;线程执行了...&quot;);
        try {
            Thread.sleep(200);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

public static void main(String[] args) {
    CreatThreadDemo1 d1 = new CreatThreadDemo1(&quot;first&quot;);
    CreatThreadDemo1 d2 = new CreatThreadDemo1(&quot;second&quot;);

    d1.start();
    d2.start();

    d1.interrupt();  //中断第一个线程
}
}
</code></pre>
<p>常规方法，不多做介绍了，interrupted方法，是来判断该线程是否被中断。（终止线程不允许用stop方法，该方法不会施放占用的资源。所以我们在设计程序的时候，要按照中断线程的思维去设计，就像上面的代码一样）。</p>
<ol start="2">
<li>实现runnable接口作为线程任务存在</li>
</ol>
<pre><code class="language-java">public class CreatThreadDemo2 implements Runnable {
@Override
public void run() {
    while (true){
        System.out.println(&quot;线程执行了...&quot;);
    }
}

public static void main(String[] args) {
    //将线程任务传给线程对象
    Thread thread = new Thread(new CreatThreadDemo2());
    //启动线程
    thread.start();
}
}
</code></pre>
<p>Runnable 只是来修饰线程所执行的任务，它不是一个线程对象。想要启动Runnable对象，必须将它放到一个线程对象里。</p>
<ol start="3">
<li>匿名内部类创建线程对象</li>
</ol>
<pre><code class="language-java">public class CreatThreadDemo3 extends Thread{
public static void main(String[] args) {
    //创建无参线程对象
    new Thread(){
        @Override
        public void run() {
            System.out.println(&quot;线程执行了...&quot;);
        }
    }.start();
   //创建带线程任务的线程对象
    new Thread(new Runnable() {
        @Override
        public void run() {
            System.out.println(&quot;线程执行了...&quot;);
        }
    }).start();
    //创建带线程任务并且重写run方法的线程对象
    new Thread(new Runnable() {
        @Override
        public void run() {
            System.out.println(&quot;runnable run 线程执行了...&quot;);
        }
    }){
        @Override
        public void run() {
            System.out.println(&quot;override run 线程执行了...&quot;);
        }
    }.start();
}
}
</code></pre>
<p>创建带线程任务并且重写run方法的线程对象中，为什么只运行了Thread的run方法。我们看看Thread类的源码:<br>
<code>public class Thread implements Runnable{……}</code>;<br>
4.创建带返回值的线程</p>
<pre><code class="language-java">public class CreatThreadDemo4 implements Callable {
public static void main(String[] args) throws ExecutionException, InterruptedException {
    CreatThreadDemo4 demo4 = new CreatThreadDemo4();

    FutureTask&lt;Integer&gt; task = new FutureTask&lt;Integer&gt;(demo4); //FutureTask最终实现的是runnable接口

    Thread thread = new Thread(task);

    thread.start();

    System.out.println(&quot;我可以在这里做点别的业务逻辑...因为FutureTask是提前完成任务&quot;);
    //拿出线程执行的返回值
    Integer result = task.get();
    System.out.println(&quot;线程中运算的结果为:&quot;+result);
}

//重写Callable接口的call方法
@Override
public Object call() throws Exception {
    int result = 1;
    System.out.println(&quot;业务逻辑计算中...&quot;);
    Thread.sleep(3000);
    return result;
}
}
</code></pre>
<p>Callable接口介绍：</p>
<pre><code class="language-java">public interface Callable&lt;V&gt; {
/**
 * Computes a result, or throws an exception if unable to do so.
 *
 * @return computed result
 * @throws Exception if unable to compute a result
 */
V call() throws Exception;
}
</code></pre>
<p>返回指定泛型的call方法。然后调用FutureTask对象的get方法得道call方法的返回值。</p>
<ol start="5">
<li>定时器Timer</li>
</ol>
<pre><code class="language-java">public class CreatThreadDemo5 {

public static void main(String[] args) {
    Timer timer = new Timer();

    timer.schedule(new TimerTask() {
        @Override
        public void run() {
            System.out.println(&quot;定时器线程执行了...&quot;);
        }
    },0,1000);   //延迟0，周期1s

}
}
</code></pre>
<ol start="6">
<li>线程池创建线程</li>
</ol>
<pre><code class="language-java">public class CreatThreadDemo6 {
public static void main(String[] args) {
    //创建一个具有10个线程的线程池
    ExecutorService threadPool = Executors.newFixedThreadPool(10);
    long threadpoolUseTime = System.currentTimeMillis();
    for (int i = 0;i&lt;10;i++){
        threadPool.execute(new Runnable() {
            @Override
            public void run() {
                System.out.println(Thread.currentThread().getName()+&quot;线程执行了...&quot;);
            }
        });
    }
    long threadpoolUseTime1 = System.currentTimeMillis();
    System.out.println(&quot;多线程用时&quot;+(threadpoolUseTime1-threadpoolUseTime));
    //销毁线程池
    threadPool.shutdown();
    threadpoolUseTime = System.currentTimeMillis();
}

}
</code></pre>
<p>7.利用java8新特性 stream 实现并发</p>
<pre><code class="language-java">public class CreatThreadDemo7 {
public static void main(String[] args) {
    List&lt;Integer&gt; values = Arrays.asList(10,20,30,40);
    //parallel 平行的，并行的
    int result = values.parallelStream().mapToInt(p -&gt; p*2).sum();
    System.out.println(result);
    //怎么证明它是并发处理呢
    values.parallelStream().forEach(p-&gt; System.out.println(p));
		}
	}
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笑口常开，好彩自然来]]></title>
        <id>http://jumpalang.5a1.xyz/post/xiao-kou-chang-kai-hao-cai-zi-ran-lai</id>
        <link href="http://jumpalang.5a1.xyz/post/xiao-kou-chang-kai-hao-cai-zi-ran-lai">
        </link>
        <updated>2019-08-07T07:42:30.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>小时候父母吵架闹到要离婚的地步时，我挺身而出劝解道：“难道你们就不能打一顿孩子消消气？非要闹到离婚不可？弟弟还那么小，你们打他，他又不会记仇！”</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>小时候父母吵架闹到要离婚的地步时，我挺身而出劝解道：“难道你们就不能打一顿孩子消消气？非要闹到离婚不可？弟弟还那么小，你们打他，他又不会记仇！”</p>
</blockquote>
<!-- more -->
<div style="text-align:center;">
	<h1>洗不完的头</h1>
	 <div>
		<video controls="controls"  autoplay="autoplay"  width="66%">
		<source src="http://jumpalang.two3.cn/%E6%B4%97%E4%B8%8D%E5%AE%8C%E7%9A%84%E5%A4%B4.mp4" type="video/mp4" />
		</video>
	</div>
	</div>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[idea快捷键]]></title>
        <id>http://jumpalang.5a1.xyz/post/idea-kuai-jie-jian</id>
        <link href="http://jumpalang.5a1.xyz/post/idea-kuai-jie-jian">
        </link>
        <updated>2019-07-26T15:49:38.000Z</updated>
        <summary type="html"><![CDATA[<p>此份快捷键是从myeclipse移植过来的，from<code>尚硅谷·宋红康 设置版</code></p>
]]></summary>
        <content type="html"><![CDATA[<p>此份快捷键是从myeclipse移植过来的，from<code>尚硅谷·宋红康 设置版</code></p>
<!-- more -->
<h1 id="simple">simple</h1>
<p>alt+r(run) 执行<br>
alt+enter 万能解错/生成返回值变量</p>
<p>alt+left 退回到前一个编辑的页面<br>
alt+right 进入到下一个编辑的页面</p>
<p>ctrl+c 复制代码<br>
ctlr+z 撤销<br>
ctrl+y 反撤销<br>
ctrl+x 剪切<br>
ctrl+v 粘贴<br>
ctrl+s 保存<br>
ctlr+a 全选</p>
<p>ctrl+o(outline) 查看类的结构<br>
ctrl+d(delete line) 删除一行或选中行</p>
<p>ctrl+E 打开最近修改的文件</p>
<p>ctrl+f 查找/替换(当前)<br>
ctrl+h 查找(全局)<br>
shift+shift 查找文件</p>
<p>tab 选中数行，整体往后移动tab<br>
shift+tab 选中数行，整体往前移动tab</p>
<p>F2 查看文档说明<br>
F4 查看继承关系</p>
<h1 id="altshift">alt+shift</h1>
<p>alt+shift+r(rename) 修改变量名与方法名<br>
alt+shift+s 生成构造器/get/set/toString<br>
alt+shift+z 生成try-catch等</p>
<p>alt+shift+f 局部变量抽取为成员变量<br>
alt+shift+m 局部代码抽取为方法</p>
<p>alt+shift+c(collapse) 收起所有方法<br>
alt+shift+x(expand) 打开所有方法</p>
<h1 id="ctrlshift">ctrl+shift</h1>
<p>ctrl+/ 单行注释<br>
ctrl+shift+/ 多行注释</p>
<p>shift+enter 向下开始新的一行<br>
ctrl+shift+enter 向上开始新的一行</p>
<p>ctrl+shift+t 查看源码（ctrl+选中指定结构也可）<br>
ctrl+shift+f(format) 格式化代码</p>
<p>ctrl+w 关闭当前打开的代码栏<br>
ctrl+shift+w 关闭打开的所有代码栏</p>
<p>ctrl+shift+y 大小写互转<br>
ctrl+shift+x 打开代码所在硬盘文件夹<br>
ctrl+shift+u(UML) 查看类的继承结构图<br>
ctrl+shift+h(call hierarchy) 查找方法在哪里被调用<br>
ctrl+shift+q 快速搜索类中的错误<br>
ctrl+shift+v 选择要粘贴的内容</p>
<h1 id="ctrlalt">ctrl+alt</h1>
<p>alt+/ 提示补全<br>
ctrl+alt+/ 提示方法参数 类型</p>
<p>alt+up 向上移动行<br>
alt+down 向下移动行<br>
ctrl+alt+down 向下复制行</p>
<p>ctrl+alt+h(method hierarchy) 查看方法多层重写结构<br>
ctrl+alt+f(favorites) 添加到收藏</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[(转载)高考完了，怎样选专业才能月薪八万]]></title>
        <id>http://jumpalang.5a1.xyz/post/zhuan-zai-gao-kao-wan-liao-zen-yang-xuan-zhuan-ye-cai-neng-yue-xin-ba-wan</id>
        <link href="http://jumpalang.5a1.xyz/post/zhuan-zai-gao-kao-wan-liao-zen-yang-xuan-zhuan-ye-cai-neng-yue-xin-ba-wan">
        </link>
        <updated>2019-07-11T03:55:35.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>本文转载自微信公众号<strong>九边</strong>，作者：<code>二号头目</code></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>本文转载自微信公众号<strong>九边</strong>，作者：<code>二号头目</code></p>
</blockquote>
<!--more-->
<p>首先得说下，本文非广告，广告的文案那个“作者”的地方写的是“特邀发布”，而不是“二号头目”。而且有些同学总拿广告词里的一些内容怼我，说广告文里一些内容不科学，这个我是知道的，但是那个文案也不是我写的啊，人家也不让我改，你们知道博主搞号有多艰辛了吧。咱们接下来说正事。</p>
<p>又到了一年一次的大学选专业，很多小伙伴后台让博主赶紧写一个帖子，说说选专业的事，一小部分小伙伴是因为自己要上大学了，更多的是侄子要上大学，或者小姨子要上大学，作为一个四有青年不甘心坐在旁边说一些无关痛痒的话，比如“学计算机挺好，隔壁老王他儿子才三十岁就秃了”，再比如“金融听起来还不错，楼上大妈她闺女卖P2P赚翻了”等等。</p>
<p>以及很多小伙伴不知道在哪搞到一个梗，多次问倒报考哪个专业毕业后能月薪八万，博主倒是确实见过这么高的工资，一会儿文中会提到。不过现实中很少开那么高工资，税高的受不了，一般公司都有别的玩法，把工资均摊到其他选项里，帮忙避税。</p>
<p>今天博主把自己知道的关于选专业的事跟大家分享下，大家可以参考下，万一有用呢。当然了，你们肯定不会只看我一个人的嘛，就当我说的是一个侧面，而且文中有一些我对职业的思考，希望对大家能有帮助。</p>
<p>首先我们得强调几个基本常识：</p>
<p>1、除了部分专业性极强的专业，比如医生和律师，绝大部分人在毕业五年内就开始折腾跟自己专业无关的事，尤其是这年代，对未来的确定性越来越低，而且有些专业在人才市场上根本没有匹配的工作，比如我的一个小伙伴都毕业多年了，尽管继承了他爹的洗车店现在还不错，不过他依旧长期关注人才市场的招聘启事，查看有招哲学系毕业的没。每次看到没人招哲学毕业生，就感慨家里有钱真是好，可以去读一些没卵用的专业。</p>
<p>2、能去大城市就去大城市，原因一会儿讲。</p>
<p>3、除非那种比较特殊的情况，<strong>先选学校，再选专业</strong>，你毕业两年后，基本没人问你哪个专业的，因为很多专业你说了别人也不懂，但是你说你大学名字，别人永远都可以再第一时间给你的大学找个位置放进去，比如“牛逼，名校啊”，或者“嗯，还不错，应该不是985就是211”，再或者“没咋听说过，应该和驻马店职业技术学校差不多吧”。等到工作五年之后，后续几乎不会有人关心你专业了，<strong>你的标签是由你之前工作的厂子和你的毕业学校共同组成的</strong>。——<code>我的想法：如果可以上好学校就选好学校，不能上就选个好专业</code>。</p>
<p>4、大学其实教不了你多少东西，基本全靠毕业后自己学，这也是为啥博主一直在说保持学习能力。“学习能力”这事有两重意思，一是不惧怕学习新东西，二是知道学习曲线，能够顺利抗过学习新知识初期的挫折感。</p>
<p>接下来我们讲几个博主了解的比较多的，因为这些问题博主几乎天天接触，了解不多的其他问题可以在评论区提，我不知道别人应该也可以解答。</p>
<p>首先，咱们一定要说金融。</p>
<p>金融领域我了解一些，大家首先要抛弃“学金融就可以赚钱”这一荒谬理论，相比其他领域，金融领域更像是“明星圈”，我们说，世界上有两种职业，一种是呈现出明显“头部效应”，也就是这个行业里1%的人拿走了99%的钱，金融就是这么一个领域，此外还有直播行业，头部主播一晚上可以赚一辆法拉利，头部以下的主播只能是喝汤；另一种是金字塔形的，头部用户赚的是不错，但是不会拿走太多，比如码农领域，我们公司最顶尖的码农跟普通码农的收入也超不过三倍。</p>
<p>一方面好像是搞金融的人很多都爱历史，所以共同爱好让我认识一堆搞金融的；另一方面我哥当初就是仰慕金融领域的金领气质，名校物理专业毕业，数学牛逼的一塌糊涂，去金融领域，准备用数学搞个模型什么的，就跟华尔街那些精英似的玩交易，后来就去了国内知名的一个基金公司，然后变成了一个拉皮条的，嗯，生活就是这么惨无人道。</p>
<p>上两张图吧，方便大家理解：</p>
<p>你以为的金融从业者：</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1562817683446.jpg" alt=""></p>
<p>现实里绝大部分金融从业者：</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1562817687397.jpg" alt=""></p>
<p>当然了，我哥去拉皮条不代表他赚的不多，他的主要工作是忽悠一些有钱人去买他们公司的一些理财产品，他从中抽成，旱涝保收，合同里写的很清楚，盈亏由客户自负，他们拉皮条的要收固定的管理费。通过这么多年的折腾，他成功取得了一群有钱人的信任，嗯，每年都会投，他每年就算不去线下拉皮条，收入也比那些互联网大厂的产品经理版本经理赚的多。</p>
<p>我问过他金融行业的事，他表示绝大部分都是拉皮条的，因为这个领域最难的事情不是怎么交易怎么赚钱，那玩意比较玄学，绝大部分交易员的交易盈利情况都赶不上大盘涨幅，剩下的交易员业绩还不如只猴，既然这样，往往基金公司会买一个组合，也就是一堆以往业绩不错的股票，放在那里慢慢涨，跟着大盘自由摇摆，基金公司最重要的任务就是去拉钱，有了钱，啥都好说，实在不行可以去做配资放高利贷嘛。所以正如微博上某金融大V说的，那种金融领域的妹子们绝大部分长得跟高端会所小姐姐似的，我也是后来才明白了他在暗示啥，虾仁诛心啊，大家不要学习他。</p>
<p>而且大部分银行或者金融公司招聘，招过去之后经常是在前台什么的，痛苦至极，每年都有一堆人找我说这事，当然了，博主作为社区的“知心姐夫”，也只能是听听，给不出什么合理建议。</p>
<p>而且这个行业是严重过剩的，我最近五年每年都会去一线招聘，因为现在国内的大厂，比如腾讯阿里巴巴华为什么的，都开始让项目Leader或者项目负责人自己去招聘，HR只负责把关，看看应聘的人有没有精神病或者会不会高压跳楼什么的，所以博主这样的技术相关领域的就得去招聘，招聘过程中发现一个问题，就是“海龟”太特么多了。软件行业海龟都多，金融行业那简直是乌央乌央。</p>
<p>可能是拜前些年对海龟的无底线崇拜，大批在国内都考不上大学的孩子被送到了海外去深造，这些人严重拉低了海归含金量，学成归国要建设祖国的时候，发现有些过量了。而且早期的企业家大部分都是农民企业家，看不懂留学生的学历含金量。</p>
<p>最近几年HR基本都是专业化了，小公司我不知道，你去大厂的HR部门看看，到处都是一堆留学归来的Linda和Abby，事实上留学生回国干HR已经是行业惯例了。</p>
<p>这些人最了解留学生，而且娓娓道来，有次吃饭，一个叫Jade的小姐姐跟我们普及了哪些大学是可以直接花钱上，哪些大学每年不咋招人，只收有钱人，哪些大学普通人无论如何也上不起等等，把我们几个土鳖听的一愣一愣，毕竟我们这些土鳖十万以内就可以把大学读完，有人甚至跟刘某东一样，没带钱就去上大学，人家留学生要花几百万，你们感受下。</p>
<p>一句话总结，英联邦的毕业生整体优势非常低，北美的相对较高。英联邦包括英国，澳大利亚，新西兰等等，大家去的时候仔细考虑下。这个趋势现在已经很明显，再过五六年，会更加明显。</p>
<p>为啥扯留学生那里去了呢？因为这些年去海外留学的10个里有7个学的是金融，而金融行业整体需求量并不高，而且跟周期有关，你们感受下。</p>
<p>金融说到这里，如果你家里条件好，并且对这个职业心里有数，再去报考，如果家境一般，以为学了金融就可以赚钱，我劝你啊，尽快放弃幻想轻装上阵，有助于身心健康。</p>
<p>说说为啥我经常说年轻人争取去大城市呢，结合这两天的新闻大家也都感觉到了，那些小地方，盘根错节，很有可能校长和公安局长都是一家子，相互提携，相互包庇，不管做啥事都得找人。</p>
<p>当然了，博主这样的成年人不会无聊到感慨社会怎么这么黑暗，我是说，小地方本质还是前现代社会，人情社会，不像大城市，陌生人社会，相互之间遵守简单规则，反而相处容易的多。不过也有个问题，如果在大城市将来混不下去，回到小地方，会过得略痛苦。</p>
<p>之前总有神经病感慨大城市里邻居之间比较冷漠，拜托，这样才是正常社会好不好，村里那种互相都认识，天天互相打探流言蜚语，每走几步就得跟人打招呼才特么烦人。</p>
<p>这时候肯定有小伙伴要问了，大城市房价高怎么办？</p>
<p>其实吧，不要太在意，大城市房价高主要是有人抬，繁荣赋予了一堆砖头以价值，偏远山区，索马里，委内瑞拉的房价并不高，你也不会去买，所以房价并不是实体的，它是繁荣本身。</p>
<p>你如果竞争力能跟得上大城市，自然能买得起，这个不是鸡汤，懂的人自然懂。而且收入曲线不是线性的，干着干着会有一个跳跃，如果没有，也保持平常心吧，咱们绝大部分人都是普通人，试试不行就算了。</p>
<p>美国人经常说“give a shoot”，也就是“打了一枪”，或者“尝试过”，一枪没开是遗憾，开了没打中就拉倒了，纠结也没用。我们尽量避免自己成了那种一辈子没做过艰难决定，没冒过险的人，就可以了。</p>
<p>而且我们总说，受过教育的成年人思考问题，少用“平均”这个说法，多用“二八定律”，比如中国人平均收入xxx，脑子不好的第一反应是还不如非洲，接受过教育的人第一反应是卧槽，前三亿人接近欧美了啊。</p>
<p>如果三亿没有接近欧美，那三亿再来一次“二八定律”，这六千万妥妥达到欧美发达国家标准了，正好欧美大国人口也就是这个级别，六七千万人，正好是一线城市人口，嗯，<strong>去一线就是出国</strong>。</p>
<p>咱们再说码农。</p>
<p>先说一句，码农里有将近一半不是计算机或者软件出身的，很多都是自动化机械什么的，也就是说如果你大学没读计算机，将来去做计算机相关的，也不别扭。</p>
<p>其次再说下工资。工资高主要是集中在互联网大厂中，这些厂子都财大气粗，所以工资高，此外还有一些刚融到资的，这类企业现在不明显了，去年的时候工资高到离谱，我招聘过一个货，转眼就被一家新公司以月薪八万抢去做区块链了，后来市场上突然没钱了，倒闭了一堆企业，刚才说的那小子也失业了，年初还在联系我有别的职位没，不知道现在咋样了，刚才给他发消息没鸟我，估计是觉得我要嘲笑他。</p>
<p>估计今后很多年都不会出现这种大井喷了。</p>
<p>但是高工资没了，不代表工资不高，码农这种智力密集而且有一定门槛的行业，注定在很长一段时间内不会太低。而且大家肯定有个纳闷地方，那么多人去学码农，会不会饱和?</p>
<p>饱和倒是也够呛，而且码农里也区分三六九等，饱和之后可能会拉低整体的工资，不过优秀的程序员依旧可以去好的厂子里继续卖。</p>
<p>而且每年写那么多代码，代码这玩意就跟中午吃剩下的剩饭一样，放久了就发霉，如果没人维护，产品很快就没法用了，这也是为啥我说将来代码会越来越多，需要的码农也越来越多。至于人工智能，听听得了，如果你现在就担心人工智能会取代你，所以干啥都虚，那你趁早别干了，不等人工智能取代你，你周围的人就把你给取代了。</p>
<p>此外很多小伙伴问我将来去做网络工程师，加入华某为，“黄沙百战穿金甲”，怎么样？</p>
<p>菊厂我恰好了解一些，就现在的情况，说实话不是特别好，这些年华某为通过“黑寡妇”策略，也就是通过极端压低通信设备和服务的价格，让友商混不下去，基本上干翻了所有对手，并且在技术和储备上遥遥领先，啥意思呢？你如果通信行业毕业，最好的选择就是去某为，但是某为现在路由器领域正在把研发内部转到手机那边去，内部路由器研发其实是过剩的。我说这个，大家参考下。</p>
<p>我们继续放几张图，大家感受下：</p>
<p>你以为的通信工程师：</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1562818214463.jpg" alt=""></p>
<p>真实的通信工程师：</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1562818217930.jpg" alt=""></p>
<p>而且这个第二张照片并没有瞎说，国家级通信网络复杂极了，每台设备都有上亿行代码，而且包括几十个厂商的，出现了不以人意志为转移的混沌性和随机性，经常出现不知道它为啥坏了，不知道为啥又自己好了，所以各国都经常想一些办法，来增加网络稳定性，很多国家都有给服务器开光的习惯。</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1562818230406.jpg" alt=""></p>
<p>再说下经济历史。</p>
<p>很多小伙伴说看博主写历史经济很有意思，将来去读这专业好不好？</p>
<p>经济先放下，历史非常不建议，喜欢的话跟博主一样研究就可以了，不然大概率一毕业就失业，而且根据我这些年的经验，没有自夸的意思，喜欢历史的人大概率<strong>显得</strong>挺博学，但是学历史的人都非常拧巴，一开口满嘴大词，不知道他们在说啥。</p>
<p>至于经济学，参考金融学。从我接触的人来看，经济金融知识真起作用的地方，主要是写财经类文章那伙人，因为那些复杂的金融用语只有在吹牛逼时候才有用，真实世界金融业主要是谈项目，谈分红，你扯那些术语，你的客户也就是那些有钱人或者企业家，他们又不懂经济学更不懂金融。想学金融赚钱你还不如去学会计。</p>
<p>再说下医生和律师，律师我就不多说了，因为我也不知道，身边律师不少，不过一直没弄清楚他们在忙啥，也不知道他们到底好不好混。</p>
<p>医生的话，我在微博做过调查，几乎所有学了医的小伙伴都反应自己忙的离谱还不赚钱，不建议其他小伙伴加入。不过我这些年在海外没少呆，明显感觉到一件事，就是我国是政府通过压迫医生行业来给老百姓发福利。</p>
<p>其实大家去过美国就有感觉，那边的医生都是金领，爽的不得了，我之前提到过，认识一个美国牙医，家里竟然有个小飞机，着实吓了一跳，后来才知道美国牙医能赚这么多的有很多。医生在美国是卖高端服务的，我有点相信在不久的将来，中国也会走上这条路。不过只是猜想，大家可以作为参考吧。</p>
<p>而且医生和律师跟码农有个明显不一样的地方，可能工资一样，但是前边那俩更有社会地位一些，地位这东西大家得慢慢体会。</p>
<p>说到这里大家肯定要说了，博主你能不能不拐弯抹角，能不能一句话概括下？</p>
<p>其实我的意思是，如果你家有钱，选啥都没问题，你甚至可以去学哲学嘛。</p>
<p>但是如果跟博主一样，出身比较普通，建议往技术层面靠，这样有这么几个好处：</p>
<p>首先，技术是相通的，而且心里也不惧，学了自动化分分钟转计算机，计算机混不下去了还可以去链家卖房，但是如果不是技术出身，想去做技术，心里就有点虚。这也是为啥他们学数学的人转行比较容易，尽管我经常说月薪两三万的码农只用得着初中数学，主要是他们心里不惧。</p>
<p>其次，学习技术可以有效治疗精神病，别笑，没瞎说，一般长期不干技术，就会产生一种怀才不遇的错觉，学了技术，知道随便一个小问题都可以让人折腾好几个通宵，人多多少少会谦恭一些，开始意识到社会比较复杂，而不是天天批评社会这不正常那又不对，一切都是体制问题，等等，毕竟大家基本都讨厌屁也不会还目空一切的精神病。博主自己就是通过技术治好了这个病。</p>
<p>最后，学了技术容易找工作，骑驴找马嘛，玩过《绝地求生》的小伙伴都知道，有时候着急找辆车，跑断腿都找不到，但是一旦先找辆车，哪怕是个破摩托，很快就可以找到别的车，有了车之后就能发现到处是车。把握住一个大机会之后，人生到处是机会。</p>
<p>文末，今天正好看到一个帖子，说2017年大学生毕业后的薪酬，呃，是不是没有大家想象的高？</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1562818416597.jpg" alt=""></p>
<p>而且可能有小伙伴纳闷，这是2017年的，现在是不是好很多，事实上2017年正好是烈火烹油那一年，去年就出现明显的降温，今年估计更明显。</p>
<p>当然了，放这个图的意思是大家不要被社会上各种猎奇的新闻给迷惑了双眼，现在远远没到“月薪一万活不下去”那种地步，埋头做好自己的事，抬头随时关注趋势，毕竟，坐在潮头，奋斗一年顶十年。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[(转载)为什么绝大部分人都掉进了坑里]]></title>
        <id>http://jumpalang.5a1.xyz/post/zhuan-zai-wei-shi-me-jue-da-bu-fen-ren-du-diao-jin-liao-keng-li</id>
        <link href="http://jumpalang.5a1.xyz/post/zhuan-zai-wei-shi-me-jue-da-bu-fen-ren-du-diao-jin-liao-keng-li">
        </link>
        <updated>2019-07-11T03:40:16.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>本文转载自微信公众号<strong>九边</strong>，作者：<code>二号头目</code></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>本文转载自微信公众号<strong>九边</strong>，作者：<code>二号头目</code></p>
</blockquote>
<!--more-->
<p>有个词，跟“熵增”一样令人着迷，叫内卷化。</p>
<p>第一次听到这个词是在一篇分析清朝经济的文章中，讨论清朝为啥以魔鬼的步伐避开了工业革命的时候，学者们提出了“内卷”的概念。</p>
<p>这是个啥意思呢？这么个逻辑链：</p>
<p>首先，清朝人口太多，人力成本非常非常的低；</p>
<p>所以，不管干啥，都不需要改进技术，通过增加人力就可以解决。比如丝绸和瓷器有利可图，需要扩大再生产，如果在英国，人力太贵，增加一百个人的花费还不如搞台机器来解决，英国人开始研究改进机器。但是在中国，人力便宜，搞机器还不如多雇佣几个人。</p>
<p>但是不搞机器的话，就不会有工业来吸收多余人口，我们知道，工业化时代人口才是资源，在那之前，人口经常是累赘，农业社会对过剩人力的吸收能力极弱，过剩人力进一步导致人力成本低，恶性循环。</p>
<p>结论，中国在当时的那个情况下，进入了一个循环向下的通道，无论如何都没法不依赖外界的情况下打破自身的循环，突破手工业和农业“结界”，就像一个无形的玻璃似的，挡在中国的前边。</p>
<p>“内卷化”就是一种自我锁死在低水平状态上。</p>
<p>为啥喜欢这个逻辑呢？</p>
<p>一方面能说服我，能感受到有种冰冷的逻辑链存在，而不是简单的“中国人的思维有问题”，“思维有问题”这就叫廉价的解释，这种解释方法能解释了世界上几乎所有的问题，比如为啥有的国家穷？他们国家人的思维有问题。为啥中东总打仗？因为思维有问题。其实吧，喜欢用这个逻辑的人思维才有问题，而且全家思维都有问题。</p>
<p>另一方面，把这个逻辑扩散下，就能发现我们身边到处都是这样的例子。</p>
<p>比如，一个父母外出打工的留守儿童，在爷爷奶奶的照顾下，很早就辍学，然后进入社会当小工，只有体力可以出卖，闲暇时间也被抖音小姐姐给挤占了，想学习点新东西，基本不大可能得到周围人的支持，而且也没有多余的时间去学习，这就是一种“低层次循环”，日复一日，人生越混越掉坑里了。</p>
<p>再比如，一个京沪白领，天天早上出门，晚上很晚到家，天天都在忙，但是过了一些年才发现，以往的那些红利，升职加薪，本质都是教育和年龄红利，等到黄金年龄一过，如果没有升到一个不可或缺的位置上，绝大部分人迅速进入下行通道，似乎越努力掉的越深。</p>
<p>那大家肯定要问了，博主你说这些我们已经懂了，接下来你该说你有什么建设性意见了吧。</p>
<p>其实博主也没招，一旦进入真正的“内卷化”流程，只有一个办法能解决，就是外界资源的注入。</p>
<p>我们复盘下，为啥后来我国从内卷化里逃逸出来了？</p>
<p>有这么几个因素，一是建国后在初代领导人大手笔操作下，我国被深层次犁了一遍，生产，建设，平等，妇女解放，全面识字，基础道路交通设施等方面有了初步的奠基，这算作是个人努力。</p>
<p>其次是苏联投资，在苏联支持下，埋藏在我国地底的财富被挖了出来，我国也就有了第一笔上桌操作的筹码。</p>
<p>最后一发是加入WTO之后出现了像大海一样的市场，前期的准备才有了意义，可以生产，升级，再生产，有了内需，内需又可以拉动经济。一开始生产一些低端玩意，慢慢的生产越来越精细的东西，将来会像台湾和韩国日本一样引领科技进步。</p>
<p>当然了，生产的广度上也有了突破，黄桥镇农民们生产的小提琴干掉了日本同行，市场份额达到了恐怖的世界一半，而且不是低端玩意，很多是中高端的。另外一个村子的农民们控制着全世界最大的快递产业，简直恍若隔世。</p>
<p>大家看到了吧，整体是需要外界的帮助的，外界拉一把，也就是我们民间说的“贵人”，贵人是高阶层的，你的问题在他那里不算问题，他可以把你从底层拉上去，拉上去之后看情况，有可能就进入高阶层良性循环了，形成正反馈，螺旋上升。也有可能是锁死在了一个稍微高一些的层次，只是比之前强一些。</p>
<p>多年以前我从一个我觉得最有脑子的人那里学到了一句话，他说小孩靠教育，年轻人靠勤奋，中年人靠运气，老年人注意前列腺。</p>
<p>教育也是个“贵人”，知识本身就是上帝，可以超度一些人，而且相对平等一些，毕竟你现在在网上可以看到耶鲁大学的心理学课程，还是翻译过来的。到现在了还有糊涂蛋在问看书和教育有什么用，如果真接受了正儿八经的教育，就不会问这么蠢的问题了。高考其实是“教育”这个上帝的对你的一次救赎，把你往上拉几个阶层。</p>
<p>我们说另外一件事，大家感受下。犹太人，以往中国人对这伙人的了解就是“聪明”，其实吧，这个问题比较复杂，大家可能不知道，如果严格讨论血统，原始的犹太人和阿拉伯人，就是现在那帮穿着帐篷的人，是同一个血统。你如果坚持认为犹太人种族智商高，你得顺便相信阿拉伯人也智商高。</p>
<p>而且犹太人本身在两千多年前被赶出中东沙漠之后，一直浪迹天涯，中间跟无数种族混血，其中一支竟然是黑人，本身也没什么血统纯正可言。</p>
<p>到现在，犹太人这个概念更多的是一种文化概念，不是血统概念。也就是说，姓犹太教，并且母系跟原有的犹太人扯上点关系，就是犹太人。比如我国河南开封还有一撮犹太人，大家可以搜一下，完全是中国脸。</p>
<p>那问题是这伙人的成就有目共睹，这怎么解释呢？其实不需要解释，犹太人里高成就的，比如名字里带着“斯坦”和“伯格”的，基本都是大德意志地区的犹太人，也就是现在的德国和奥地利那一带，而其他支系的，基本都不太行，比如东欧那些，普遍成就非常低。</p>
<p>所以这些年一个非常靠谱的解释是，犹太人高成就，其实是吃了大德意志地区的教育红利，德国是最早搞义务教育的。而且犹太家庭识字率超高，都是宗教狂，都想让孩子学习圣经和塔木德，这一点我们在清教徒建立美国中提到了，清教徒也是这个特点，这篇文章<a href='https://mp.weixin.qq.com/s/_qmzAy40j6Bd8EijVxgsBA' target='_blank' >《他们迷信，他们偏执，他们爱烧人，但他们最终创立了美国》</a>。</p>
<p>唠唠叨叨说了半天，其实就是想说一件事，教育，教育是第一个贵人。</p>
<p>第二是运气。</p>
<p>刚才说的那句话前两句都好理解，中年人靠运气这件事我理解了很多年，最近慢慢有点体悟：</p>
<p>首先，几乎所有牛逼人在人生道路上最关键的一步，都是靠运气走出去的，勤奋和智力学识都是基础，能不能实现跃迁，主要靠运气，但是他们不会跟你说的，说了也没用，没法重复没法度量，甚至没法学习。巴菲特把这个成为“卵巢彩票”，生在巴菲特他们家你已经成功了一半。</p>
<p>博主现在当然也算不上什么牛逼人，不过现在各个平台上加起来百万粉丝，有时候自己都觉得难以置信，就是当初李子暘，对，铅笔社的那个李子暘老师偶尔从别人那里看到我的帖子，推了几次，才从一个基本零阅读的微型博，跳跃到一个正反馈循环里，在那之前，我写了很久都没人理，被他转了后来了第一批关注的小伙伴，就慢慢成长起来了，再重复一遍，我个人觉得不大可能是现在的这个样子。所以有小伙伴问博主怎么样才能把号做起来，我一般说先得写，然后运气好的话被人捞出来。</p>
<p>运气既然这种重要，怎么去操作呢？</p>
<p>其实没办法，多尝试，你每天如果按时搬砖，其余时间玩抖音，就算有运气，也很难在你身上体现出来，以前一个很厉害的人说，在能承受的范围内多尝试，多去面对不确定性，你只有买了彩票才会中奖，你只有去寻宝才有可能碰到宝，比如年轻时候就不要怕苦去北上广一线城市多试试，那里变化多，机会多，<strong>运气总是和变化是一对好基友</strong>。就跟进化似的，进化始于自身的基因突变和环境的变化，所以不要太害怕变化，也不要太害怕不确定性。</p>
<p>一般来说吧，你做的每件事确定性都很强，学校时候好学生，毕业好员工，你很少冒险，人生按部就班，这样的话，你很容易成为彻彻底底无神论者，也不太迷信。因为拜佛不拜佛对你没啥差别，你也感觉不到有差别。</p>
<p>如果你从事高冒险性质的活动，对运气要求很高，比如打鱼为生，需要出海，或者从事黑社会，每天睡着不知道能不能醒来，人生比较坎坷，这样你就慢慢对不确定性充满畏惧，很容易变迷信。中国南方比北方迷信的多，海洋和沙漠文明都率先进入了一神教时代，很能说明问题。</p>
<p>某次出海拜了妈祖顺利归来，下一次没拜差点死海里，很容易让你觉得有“超越个人的伟力”，以后每次都去拜，哪次拜了还是碰上风浪，你就开始反思是不是上次不够虔诚。。。。</p>
<p>所以很多特别有钱的人，或者高官都喜欢风水算命什么的，他们从“不确定性”受益，想持续维持这种状态，几乎无法避免掉进“迷信”这个坑里。</p>
<p>上层基本都不确定自己怎么混到这一步的，底层对自己的人生缺乏控制，所以不可避免的迷信，如果你每一毛钱都知道是怎么来的，你想迷信也迷信不起来。</p>
<p>说这个不是想让大家去迷信，而是想尝试解释下运气到底怎么运转的，并且正确看待这玩意。<strong>运气就是基于不确定性，一般来说，你坐在家里啥也没干，好运很难会从天而降</strong>。</p>
<p>我们正常人由于进化上的一些缺陷，比如本能地恐惧变化和不确定性，因为在漫长的原始社会，随意乱溜达很容易被老虎吃掉，我们都是不爱乱溜达的人的后代。</p>
<p>而且总是容易悲观泄气，没法长时间保持乐观，也好理解，原始社会好奇心太强，看见毛茸茸的豹纹绳状物就想摸一下的人也被基因筛选的很厉害，剩下的人本能地对不认识的东西充满疑惧。</p>
<p>而且本能地对短期没效果的东西充满反感，没法再一个领域熬死竞争对手，也就没法再多条战线上同时进攻。</p>
<p>综上，绝大部分人容易内卷化掉进坑里还不容易出来。</p>
<p>文末多说一句，博主写这个不是说博主已经从坑里出来了，而是说把自己的一些思考和所见跟大家分享下。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一章-spring概述-精通spring4.x企业应用开发实战]]></title>
        <id>http://jumpalang.5a1.xyz/post/di-yi-zhang-spring-gai-shu</id>
        <link href="http://jumpalang.5a1.xyz/post/di-yi-zhang-spring-gai-shu">
        </link>
        <updated>2019-07-09T02:36:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="13-spring带给我们什么">1.3 Spring带给我们什么</h2>
<ol>
<li>Spring的好处（摘自第6页）</li>
</ol>
<ul>
<li>方便解耦，简化开发。通过Spring提供的IOC容器，用户可以将对象之间的依赖关系交由Spring控制，避免硬编码所造成的过度程序耦合。有了Spring，用户不必再为单实例模式类、属性文件解析等这些底层的需求编写代码，可以专注于上层的应用。</li>
<li>AOP编程的支持。通过Spring提供的AOP功能，方便进行面向切面的编程，很多不容易用传统OOP实现的功能可以通过AOP轻松应对。</li>
<li>声明式事务的支持。在Spring中，用户可以从单调烦闷的事务管理代码中解脱出来，通过声明的方式灵活地进行事务管理，提高开发效率和质量。</li>
<li>方便程序的测试。可以用非容器依赖的编程方式进行几乎所有的测试工作。在Spring里，测试不再是昂贵的操作，而是随手可做的事情。</li>
<li>方便集成各种优秀框架。Spring不排斥各种优秀的开源框架，相反，Spring可以降低各种框架的使用难度。Spring提供了对各种优秀框架（如Sturs、Hibernate、Hessian、Quartz等）的直接支持。</li>
<li>降低Java EE API的使用难度。Spring对很多难用的Java EE API(如JDBC、JavaMail、远程调用等)提供了一个薄层封装，通过Spring的简易封装，这些Java EE API的使用难度大大降低。</li>
<li>Java源码是经典的学习范例。Spring的源码设计精妙、结构清晰、匠心独运，处处体现着大师对Java设计模式的灵活运用及对Java技术的高深造诣。Spring框架源码无疑是Java技术的最佳实践范例。如果想在短时间内迅速提高自己的Java技术水平和应用开发水平，学习和研究Spring源码将会收到意想不到的效果。</li>
</ul>
<h2 id="14-spring体系结构">1.4 Spring体系结构</h2>
<p><img src="http://jumpalang.5a1.xyz/post-images/1562642306584.png" alt=""></p>
<ol>
<li>IoC<br>
Spring核心模块实现了IoC的功能，它将类与类之间的依赖从代码中脱离出来，用配置的方式进行依赖关系描述，由IoC容器负责依赖类之间的创建、拼接、管理、获取等工作。BeanFactory接口是Spring框架的核心接口，它实现了容器许多核心的功能。<br>
Context模块构建于核心模块之上，扩展了BeanFactory的功能，添加了i18n国际化、Bean生命周期控制、框架事件体系、资源加载透明化等多项功能。此外，该模块还提供了许多企业级服务的支持，如邮件服务、任务调度、JNDI获取、EJB集成、远程访问等。ApplicationContext是Context模块的核心接口。<br>
表达式语言模块是统一表达式语言（Unfied EL）的一个扩展，该表达式语言用于查询和管理运行期的对象，支持设置/获取对象属性，调用对象方法，操作数组、集合等。此外，该模块还提供了逻辑表达式运算、变量定义等功能，可以方便地通过表达式串和Spring IoC容器进行交互。</li>
<li>AOP<br>
AOP是继OOP之后，对编程设计思想影响极大的技术之一。AOP是进行横切逻辑编程的思想，它开拓了考虑问题的思路。在AOP模块里，Spring提供了满足AOP Alliance规范的实现，还整合了AspectJ这种AOP语言级的框架。在Spring里实现AOP编程有众多选择。Java5.0引入了java.lang.instrument,允许在JVM启动时启用一个代理类，通过该代理类在运行期修改类的字节码，改变一个类的功能，从而实现AOP功能。</li>
<li>数据访问和集成<br>
任何应用程序的核心问题是对数据的访问和操作。数据有多处表现形式，如数据表、XML、消息等，而每种数据形式又拥有不同的数据访问技术（如数据表的访问既可以直接通过JDBC，也可以通过Hibernate或MyBatis）。<br>
首先，Spring站在DAO的抽象层面，建立了一套面向DAO层的统一的异常体系，同时将各种访问数据的检查型异常转换为非检查型异常，为整合各种持久层框架提供基础。其次，Spring通过模板化技术对各种数据访问技术进行了薄层封装，将模式化的代码隐藏起来，使数据访问的程序得到大幅简化。这样，Spring就建立了和数据形式访问技术无关的统一的DAO层，借助AOP技术，Spring提供了声明式事务的功能。</li>
<li>Web及远程操作<br>
该模块建立在Application Context模块之上，提供了Web应用的各种工具类，如通过Listener或Servlet初始化Spring容器，将Spring容器注册到Web容器中。该模块还提供了多项面向Web的功能，如透明化文件上传，Velocity、FreeMarker、XSLT的支持。此外，Spring可以整合Struts、WebWork等MVC框架。</li>
<li>Web及远程访问<br>
Spring自己提供了一个完整的类似于Struts的MVC框架，称为Spring MVC。相对于Servlet的MVC，Spring在简化Portlet的开发上也做了很多工作，开发者可以从中受益。</li>
<li>WebSocket<br>
WebSocket提供了一个在Web应用中高效、双向的通信，需要考虑到客户端（浏览器）和服务器之间的高频和低时延消息交换。一般的应用场景有在线交易、游戏、协作、数据可视化等。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[(转载)怎样向上跨越阶层]]></title>
        <id>http://jumpalang.5a1.xyz/post/zhuan-zai-zen-yang-xiang-shang-kua-yue-jie-ceng</id>
        <link href="http://jumpalang.5a1.xyz/post/zhuan-zai-zen-yang-xiang-shang-kua-yue-jie-ceng">
        </link>
        <updated>2019-07-05T03:44:07.000Z</updated>
        <summary type="html"><![CDATA[<p>本文转载自微信公众号<strong>九边</strong>，作者：<code>二号头目</code></p>
]]></summary>
        <content type="html"><![CDATA[<p>本文转载自微信公众号<strong>九边</strong>，作者：<code>二号头目</code></p>
<!--more-->
<blockquote>
<p>这两天高考结束了，新一批大学生也要毕业了，也有不少小伙伴的孩子即将或者已经降生，有不少小伙伴在后台发消息说让博主再写一下今年的抓学习搞自我提升的小技巧，以及怎样培养持续抓学习以及培养小孩学习兴趣，毕竟新时代培养好的学习习惯已经不是中学和大学的事，而是一辈子的事，咱们今天就继续聊下这事。<br>
倒也不是说博主多牛逼，而是本文作为博主这些年一些经历的总结和反思，大家姑且看看，万一有用呢。</p>
</blockquote>
<p>首先咱们要说一件事，我们经常说社会残酷，但是如果把视野扩散到全社会，就能发现一个明显的事实，绝大部人一辈子也没努力过，也没主动过，更没有主动做过艰难的决定，只是被动地接受生活的摆布。过一天算一天，这么说尽管很不近人情，不过确实也是事实。当然了，这里说的“努力”，有“<strong>主动出击</strong>“的意思在里边，克服恐惧，迎接挑战。处处被动被生活蹂躏，那叫”辛苦“。</p>
<p>在这个背景下，你只要稍微努力下，瞬间就可以超过70%的人，而且越早越好，越晚越被动。</p>
<p>而且大家不知道发现没，社会竞争剧烈的原因是资源的稀缺，但是这里说的稀缺，并不是均匀的稀缺，这两天空闲时间偶尔在看美剧《亿万》，那里边的检察官问陪审团的人，他说你们知道在美国，20%的人控制了社会的多少财富不？大家都在摇头，检察官说”<strong>几乎是全部</strong>“，恩，残酷的现实，少量的人控制了几乎全部的财富，大部分人分剩下的那点汤。</p>
<p>我们说这事，不是要控诉社会，我经常说，咱们这个号讲逻辑讲人心唯独不讲道德善恶，我是说，大家一定要加油，混到前20%去，不然下层的竞争又惨烈又没啥油水。</p>
<p>有些人总喜欢说一件事，说我既没有天分，父母也不行，怎么跟那些拼父母的人竞争？</p>
<p>这个其实是一个错觉，因为你其实从来不需要跟他们竞争，怎么理解呢？</p>
<p>因为你还没到那个高度。</p>
<p>社会肯定是分层的，就连欧美那种讲究平等的社会，大家心里其实也都明白，纽约的那几百个家庭都豪了两三百年，他们的孩子自然不会跟普通人相同起跑线。</p>
<p>但是大家要明白一个道理，你得先进入社会的前0.01%，你才会直接面对跟他们的竞争，就像你高考考了400分（假设总分750），你很郁闷，因为你觉得你考的不好是因为你觉得自己智商比不过那些700多分的孩子，拜托，醒醒，他们不是你的对手，你的真正对手跟你一样蠢好不好？！</p>
<p>也就是说，社会竞争这玩意吧，并不是需要你比所有人都强，绝大部分人又懒又低俗，几年都不进步，所以你稍微努力一些，确保超过全社会60%的人，然后再踏踏实实，干啥事都努力些认真些，多给别人笑脸，少觉得别人欠自己，好好攒钱，就可以超过社会80%的人，再在这个基础上做的更好一些，进全社会前10%并不难，甚至1%并不难，尤其是对于像大家这样不去看抖音看博主这么无聊的知识号的小伙伴。</p>
<p>社会实在是太大了，你看着有很多竞争者，事实上又没有竞争者，你唯一的竞争者就是你心里的那个好逸恶劳的小孩，《权力的游戏》里的守夜学士跟雪诺说，去做艰难的决定，<em><strong>kill the boy,let the man born</strong></em>，杀掉你心里的那个孩子，变成大人。</p>
<p>但等到了前0.01%，就开始拼父母，拼智商，长相，星座什么的，往往是好几代人的积累在竞争，是否能更进一步，也就基本开始依赖玄学了，那个大可以不必关心，该是啥就是啥了，自己也决定不了。</p>
<p>说到这里，这叫形势分析，总结下：</p>
<ol>
<li>大部分人又懒又笨，超越他们并不难。</li>
<li>你并不需要做第一，也不需要做第二，你甚至不需要跟他们竞争，你只要超过绝大部分又懒又笨的人，你就可以过上相对较好的生活，然后再这个基础上迭代改进。</li>
</ol>
<p>说到这里，大家肯定会说，道理我已经明白了，那接下来该怎么做呢？</p>
<p>老问题，先认识你自己。</p>
<p>几年前，法制节目采访了一个小伙，他盗窃什么东西被抓起来了，记者采访他的时候，这小伙非常沮丧地说，自己是犯过错误的人，应该要脚踏实地的做人，不该投机搞事，如果当初不搞事，以自己的智商，现在应该已经当上厂长了。。。</p>
<p>等等！</p>
<p>啥厂长？我当时就想问那个狗逼，你特么凭啥觉得能当上厂长，你们厂的人都是猪？让你这么一个偷偷摸摸而且觉得当厂长很容易的人去当厂长？</p>
<p>这也是我这些年发现的一个普遍问题。可能是我们的教育出了问题，<strong>绝大部人不肯承认自己资质平庸而且各方面都很平庸</strong>。</p>
<p>这种认识错位，直接导致绝大部分人，包括我自己，智商平庸还总想走捷径，这个就很尴尬，因为这种情况就跟收入有限却承担巨债务一样，分分钟面临破产违约。</p>
<p>而且不承认自己平庸，会直接导致浪费掉身上一个最重要的资质，<strong>肯下笨功夫</strong>。</p>
<p>博主以前不止一次说起过，博主大学的时候加入过一个激进的背单词邪教，那个邪教的教义就是”你认识每个单词，自然就能看懂任何一句话“，我当时对英语是半绝望的，死马当活马医，加入组织，狂背单词，每个单词抄了几十遍，后来我的英语也非常变态，现在在跨国公司给老外员工培训JAVA和数据库用英语无障碍交流。</p>
<p>那件事对我影响巨大，很多事就是那个时候慢慢明白的，比如第一个问题，<strong>慢启动</strong>。</p>
<p>好像是那本《我是个妈妈，我需要铂金包》里说的，说是美国上东区的有钱人过着幸福而残酷的生活，不仅得花钱买铂金包，而且花大价钱雇私人教练，才能练出好身材，没有好身材，拎着铂金包也是下等人，书里说的啊，大家不要骂博主。</p>
<p>如果不找教练，不是说不能练，而是没有激励，自己不知道自己在进步，所以练几天就虚了，如果找了教练，他告诉你不要多想，按照他的节奏来，肯定会好起来。并且每天鼓励你，说你的心肺功能进步明显，说你深蹲又提升了两斤，又说你背部肌肉已经有了线条，尽管主要是胡扯，但是这种胡扯能让你觉得付出有了点回报，也就有了坚持下去的动力。</p>
<p>其实想想也能发现，人想进步最难的地方，就是随时想放弃，为啥想放弃呢？因为看不到进展，不知道自己在进步。而人不管干啥正经事都 有个慢启动过程，也就是一开始没啥效果，就比如博主写了一百多万字，完全没人鸟，但是写到第二个一百万的时候，大家就围过来了，如果我的目标是”引起大家注意“，第一个一百万的时候早就放弃了。</p>
<p>刚才谈到的那个背单词也一样，你费尽千辛万苦，背了五千单词，基本不会有卵用，但是等到了八千，效果一下子就出来了， 但是60%人死在了起跑线，剩下30%死在了”临界线“之前，只有不到10%的人能突破那条线，拿到回报，等你有了一万多词汇量的时候，突然发现自己能听懂美剧在说啥了。</p>
<p>代码也一样，记得潭浩强的那本C语言里说，就跟评价飞行员是否经验丰富，要看他飞行了多少个小时一样，初级码农最应该做的事就是尽快写够一万行可运行代码。</p>
<p>说这个不是想让大家去雇一个教练，而是想说”慢启动“这事，要理解事物发展内部逻辑，要了解自己，要学会”不计后果“地去做某件事，不能成天等着回报，看不到回报迅速就懈怠了。人不断向上突破，就是克服基因固件里固有缺陷的过程。</p>
<p>此外，大学背单词经历让我对另一个问题有了新的认识，也就是天赋。相信跟我一样，不管做什么事，如果做一段时间，没啥感觉，也不太顺利，就开始怀疑自己没天赋。</p>
<p>这种想法是错误的，你一普通人，你有啥天赋？你最应该考虑的问题是：</p>
<ol>
<li>现在是慢启动阶段 ，要啥自行车？</li>
<li>数量都没够，要啥效果？</li>
</ol>
<p>把这个逻辑继续推广，大家都明白了，哪哪都是。</p>
<p>而且博主长期暗中观察，整体来说想发财两个必要条件：</p>
<p>一是可以全年无休，买卖人基本都可以，白领里只有领导可以，倒也不是大家一般说的”是自己的所以拼命干“，你也可以去搞个地摊自己搞起来嘛，我感觉主要是领导和做买卖的都是没有保障，长期过那种太有保障太稳定的生活，生理和心理上都容易残废，我本人技能就全部依赖大厂，想想离开大厂就心虚，你们感受下。</p>
<p>二是坚定看多，我以前信过公知，觉得这个社会快完蛋了，每天都很愤怒，而且这种感觉非常上瘾，天天找负面消息，简直得精神病，后来买房之后当上韭菜还上房贷，精神病自己就好了，后来我发现混的好的人一方面知道生意难做，另一方面又坚定看多。如果觉得未来会越来越来差，你干啥都虚，时间长了，就硬不起来了。</p>
<p>而且，世界很大，资源很足，最倒霉的事就是被锁在一个视野狭小的范围内，跟太多人一起竞争，要学会跳出那个小圈子，跳出来的办法就是去做有价值的事。社会竞争很激烈，也没那么激烈，在十几年，几十年如一日的奋斗面前，绝大部分人都是渣，因为绝大部分人只是辛苦，他们不是在奋斗。</p>
<p>对于关注我们这号的人，相信大家都知道什么价值，如果不知道，博主也没招了，你面临的麻烦比较大。如果你是个大学和，好好学习，英语不好就好好背一万单词，如果高数不好就把课后习题都做了，如果什么都没做还自视甚高，也不用太担心，现在荒废的只是大学，将来还有几十年可供你荒废。</p>
<p>而且前几天有人发了个帖子，说马云让他的员工996，但是自己当初却玩兼职，后来玩火了。</p>
<p>我倒是没从微博微信上赚到钱，不过码了几百万字，有了一些感想。</p>
<p>写文章其实最明显，我以前给其它平台业余写文章，写完拿了稿费就拉倒了。后来开始自己搞公号，才发现那样做赔死了。</p>
<p>因为给别的平台写文章就跟上班一样，你的工作成果被人家给买断了，这篇文章后续的盈利就跟你没关系了。比如现在这篇文章发出来后每天都会在网络里流转，看到的人可能就会关注过来。</p>
<p>一篇文章不明显，多了就非常明显，每天你睡着时候应该是还在网络里流转，积累起来随着时间的积累越来越厉害，上班跟投稿一样，工作成果的后续效益就没了，都被公司拿走了，我理解这个才是剩余价值。我现在有这个感触，大家要区分开哪些东西有长线价值，哪些东西的长线价值是自己的。</p>
<p>倒也不是说大家都要去做兼职，而是说大家平时也要留意一些，看看哪些事是有长线收益的，多做有”长线收益“的事。比如很多人把业余时间都投入了看国产垃圾电视剧，这个长线收益就是负的，经常看非常不利于身心健康。</p>
<p>而且，大家要做一件事，首先要排除自己比较有天赋这一谬论，除非你真有天赋，如果没千万不要装有，那是病，得电，早治疗早康复早上路，尽快认识到自己只有”下笨功夫“才是唯一途径，对你的人生发展非常有帮助，博主就是治好了”<strong>以为自己有天赋</strong>”这个精神病之后生活慢慢好起来的，当你<strong>肯下笨功夫之后，很多事反而不难了</strong>。</p>
<p>而且不要给自己瞎找理由，你并不需要跟二代和天才们竞争，别把自己说的那么牛逼，正如我以前说的，月收入三万以下的程序员只需要初中数学，大部分东西都跟智商家庭没关系，做不好的主要原因就是不上心，重复次数不够，量不够。上升空间广阔，加油就是了。</p>
<p>如果你对人生比较迷茫，没有找到方法论，可以像博主一样，用笨方法，相信两件事，一是：</p>
<p><strong>重复就是力量。</strong></p>
<p>第二条是欧神说的，非常有启发：</p>
<p><strong>数量堆死质量。</strong></p>
<p>大家也仔细体会下。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[摘抄《这个世界既残酷又温柔》]]></title>
        <id>http://jumpalang.5a1.xyz/post/lesslesszhe-ge-shi-jie-ji-can-ku-you-wen-rou-greatergreater-zhai-chao</id>
        <link href="http://jumpalang.5a1.xyz/post/lesslesszhe-ge-shi-jie-ji-can-ku-you-wen-rou-greatergreater-zhai-chao">
        </link>
        <updated>2019-07-04T05:18:56.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>我们要做的是就是不让我们面对的残酷现实去影响世界对我们的温柔。</li>
<li>和解并不是背叛了自己以前坚持的东西，而是巩固了叛逆的阶段性成果。</li>
<li>人的变化是主动和主观的，并非随着时间自然发生。一个人的成年不在于年龄有多大，而在于第一次做主观的选择，并愿意承受这个选择所带来的代价。人要学会主动选择并承担责任。</li>
<li>这是最残酷的时代，只要稍微懈怠一点，就会前功尽弃。这是最温柔的时代，只要稍微坚持一下，就会脱颖而出。</li>
<li>我们要逆风飞翔，因为我们每片羽翼上都沾满了自由的光辉。</li>
<li>父母与子女之间不存在兜底关系。</li>
<li>父母与子女的关系，本质是人与人感情的一种。父母与子女本就是独立的个体，只是恰好有了血缘的连接。茫茫人海之中，能够有这样亲密的关系，双方都应该视彼此为最佳礼物。保持合适的距离，用沟通替代控制，以原则取代要挟。父母和孩子之间没有控制，没有指示，他们将能一起工作，一起讨论，一起欢笑，一起辩论，一起维护对方，一起理解对方。</li>
<li>读书只是个人的爱好或选择。</li>
<li>唯有及早地进入社会，才能够对如何应对真正的竞争，以及如何创造真正的价值产生认知。</li>
<li>朋友探讨：努力钻研，不一定是基于兴趣、金钱，也可能是为了在同行中的尊严。</li>
<li>社会上出现很多人，包括我公司的一些员工，工作了一段时间，才真正发现了自己对哪个方面有需求，自己在哪个方面需要提升，然后再回到学校读书。</li>
<li>青春是这个时代的最大既得利益者，为自己体面而自由地活着才是青春最有意义的方向。</li>
<li>人生最重要的是格局，格局就如同一个物种的基因，从最源头决定了物种的生长。</li>
<li>勇气是格局的重要载体，格局大，胆越大。好在格局毕竟不是人的基因，通过后天的努力，格局是可以被培养，被提升，被塑造的。</li>
<li>我喜欢这个看起来无情、功利而冷静的世界，因为这个世界真正无差别地承认每个人的激情，承认每个人的创造，承认每个人的梦想。</li>
<li>与自己相处，获得自己内心的平和。如何才能获得内心平和，本质上需要知道自己是谁，自己在追求什么，并愿意接受、认同、努力。</li>
<li>通过赚钱实现经济独立，是为自己而活的唯一途径。经济独立是实现人格自由独立的先决条件。</li>
<li>赚钱的过程中，需要明确这个世界根据你提供的价值而能给予你的回馈。而非你的努力。个人努力的最终意义是为了呈现你对他人的价值与结果。努力的廉价自我感动不能创造任何价值，不能让世界变得更加美好，只能让自己徒增心理负担，让自己远离赚钱。请对结果负责，才是真正意义上的对自己负责。</li>
<li>婚姻自由，更包括不结婚的自由。由于长久以来的物质匮乏，婚姻在中国人普遍看来是一种面对残酷生活的避难所，而并非爱情的起点。结婚是为了让两个变得更强大，而不是互相伤害。</li>
<li>契约精神是整个文明世界多人互动的根基，无论是事业、感情、家园，对契约的尊重遵守，比金钱、权力更具力量。只有相信契约，才能理性博弈，只有理性博弈，才能透明竞争，而只有透明竞争，个人、集体和社会才能不断向前。</li>
<li>真正的快乐，不来自于周边人的认可，不来自于父母的认可，而来自于对自我人生的掌控，对自我成长的喜悦。一切快乐来自于自身，这份快乐是伟大、高贵、自由的。</li>
<li>我们必须知道这个时代是一个注重增量，而不注重存量的时代。换句话说，时代更看重你将带来什么，而不是你曾经拥有什么。</li>
<li>这个时代既残酷，也温柔。残酷的是，成就与光荣一旦发生，就没有任何价值了，温柔的是，失败与困难一旦出现，也变得无足轻重。</li>
<li>短暂的激情是不值钱的，只有持久的激情才是赚钱的。</li>
<li>种一颗树，最好的时间是十年前，其次是现在。</li>
<li>承认自己为自己而活是一个人在思想上的成人礼，为自己而活，不仅正当，而且神圣。</li>
<li>而现代的婚姻是寻找“家庭无限公司”合伙人的过程，显然是一个复杂的选择过程。</li>
<li>我的人生可以没有你，但是有了你却会变得更好，你的人生也可以没有我，但有了我也会变得更好。于是自由选择，我们决定在一起。</li>
<li>真正利己的方式是让自己成为一个终身学习者，不断汲取营养。</li>
<li>当时代的洪流袭来的时候，我们不应该妄图找到一块固定的岛屿，过上与世无争的稳定生活，因为潮汐和海浪不会给你这样的机会。潮汐的起伏不定，海浪的翻滚无情，岛屿注定淹没。我们只有找到属于自己的救生筏，在潮汐起伏中顺流而下，在海浪翻滚中随波向前，逐渐奔向美丽新世界。从现在开始，放弃对于“稳定”的执念，开始正视不确定性的正确性。接受它，拥抱它，享受它。我们才能在互联网的时代走得更远，走得更好。</li>
<li>把学习常态化和吃饭睡觉一样，是日常的行为。学习就如同吃饭，本来就是每天帮助你进化，吞吐，在精神上新陈代谢的方式，是常态化且必须碎片化的过程。</li>
<li>其实通货膨账恰恰是繁荣的秘密。在通货膨胀的预期下，绝大多数人都会采取更为激进的财务策略，花明天的钱圆今天的梦，借更多的钱投入生产与自我的提升。</li>
<li>其实教育与期货也是杠杆式的投资。</li>
<li>我们生活在一个物质极为丰富、科技高度发达的时代，我们的使命是努力奋斗让宇宙万物都能够更好地满足人的需求，而不是压抑自己的需求。</li>
<li>享受性活动的快乐本质上是不可持续的，而只有创造性活动的快乐才是持续的。</li>
<li>爱情其实是两个独立灵魂的结盟。</li>
<li>制定OKR,即目标和关键结果。目标是比较长远的，关键结果是眼前的。</li>
</ol>
<blockquote>
<p>读后感:<br>
能去大城市，尽量去大城市。<br>
教育是一个贵人，相当于让你脱离内卷化，注入外部资源。<br>
运气青睐于降临到那些敢于冒险，敢于拥抱不确定性的人身上。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[(转)你与硅谷大佬们，只差这几本书的距离！]]></title>
        <id>http://jumpalang.5a1.xyz/post/zhuan-ni-yu-huo-gu-da-lao-men-zhi-chai-zhe-ji-ben-shu-de-ju-chi</id>
        <link href="http://jumpalang.5a1.xyz/post/zhuan-ni-yu-huo-gu-da-lao-men-zhi-chai-zhe-ji-ben-shu-de-ju-chi">
        </link>
        <updated>2019-06-04T02:39:55.000Z</updated>
        <content type="html"><![CDATA[<p>如果你正思索在职业生涯中实现自己的价值或寻找突破，那么养成阅读习惯，并接触领域内最前沿的书籍，是帮助你在短时间内获取更多的信息有效方式。</p>
<p>为了让自己有更高的阅读量，马克·扎克伯格、比尔·盖茨这些科技大牛，甚至为自己建立了私人图书馆。比尔·盖茨一直保持着每年50本书以上的阅读量......</p>
<p>这些顶尖的投资者和创业者需要超越现有的文化范式去探索，思考普通人的视野忽视了什么，下一步可能会发生什么，什么又是恒久不变的。</p>
<p>在2019年4月23日世界读书日到来之际，总结了一些硅谷大佬在采访和社交媒体中被反复提及、引用和推荐的书。这些书往往意在揭示关于人性中的隐性思考模式和深层状况。</p>
<p>也许你与硅谷大佬们，只差这几本书的距离！</p>
<h1 id="穷查理宝典查理芒格智慧箴言录">《穷查理宝典：查理·芒格智慧箴言录》</h1>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559616173203.webp" alt=""><br>
Poor Charlie’s Almanack:</p>
<p>The Wit and Wisdom of Charles T. Munger</p>
<p>By Charlie Munger</p>
<p>中文版</p>
<p>《穷查理宝典：查理·芒格智慧箴言录》</p>
<p>查理·芒格 著 彼得·考夫曼 编</p>
<p>中信出版集团 | 2016.12<br>
<img src="http://jumpalang.5a1.xyz/post-images/1559616218181.webp" alt=""></p>
<blockquote>
<p>在我的一生中，我所认识的各个领域的智者，他们无不每时每刻都在读书。如果知道巴菲特读了多少书，或者知道我读了多少书，你一定会感到惊讶。我的孩子们经常调侃我说，你就是一本长了两条腿的书。              ——查理·T.芒格《穷查理宝典：查理·芒格智慧箴言录》<br>
查理·芒格是我们这个时代最伟大的商业思想家之一。</p>
</blockquote>
<p>他最为人熟知的名头是伯克希尔·哈撒韦公司的副总裁，以及沃伦·巴菲特的黄金搭档。但查理·芒格的成就远超于此。</p>
<p>芒格是一个博学多才、思想独立的人。通过经济学、历史学、生物学、物理学和心理学等领域的钻研，芒格提出一些“有益心智模型”，它们有的与我们的直觉相悖，但却像一套高分辨率的镜头，让我们更深刻地认识世界。正是这些模型让芒格了解复杂情况，认清现实问题——也顺便送他成了亿万富翁。</p>
<p>《穷查理宝典》一书是查理·芒格的个人传记，展现了芒格的投资哲学、学习理念与人生心得，书中收录了芒格的公开演讲、媒体访谈、写作素材以及一些金句，贯穿全书的是芒格的聪慧、机智，其令人敬服的价值观和深不可测的修辞天赋，读这本书可以领略芒格如何透过纷纷扰扰的表面看清事物本质的特点。</p>
<h1 id="别闹了费曼先生">《别闹了，费曼先生》</h1>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559616407200.webp" alt=""><br>
Surely you're joking, Mr. Feynman!</p>
<p>By Richard P. Feynman<br>
<img src="http://jumpalang.5a1.xyz/post-images/1559616413121.webp" alt=""><br>
《别闹了，费曼先生》</p>
<p>理查德·费曼 著</p>
<p>生活·读书·新知三联书店 | 1997.12</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559616400390.webp" alt=""></p>
<blockquote>
<p>我没有责任去完成别人期待我完成的事情，没有责任去迎合他人的期待。这是他们的错误，没有做到不代表我的失败。              ——理查德·费曼《别闹了，费曼先生》</p>
</blockquote>
<p>《别闹了，费曼先生》是关于诺贝尔奖物理学奖得主理查德·费曼先生的自传，介绍了费曼先生的经历和趣闻轶事。和查理·芒格一样，费曼先生也是一位不拘一格的思想家。不止于此，费曼先生还有更加离经叛道的人生。</p>
<p>他一生特立独行，他没时间在乎世俗眼光与套路。他讨厌装腔作势，讨厌所谓的惯例以及那个时代大众盲目遵循的一些“规矩”。除非事情的背后有深刻的科学原因和依据，否则费曼先生绝不会买账。与此同时，他热爱生活，爱吹牛，是位花花公子，也喜欢搞点小破坏。</p>
<p>弗里曼·戴森曾评价他：“半是天才，半是滑稽演员”。除去在物理学领域的造诣之外，费曼还擅长演奏邦戈鼓，擅长画画，并对生物学做出了很多的贡献。</p>
<p>他的一生精彩地诠释了——挑战常规和跨界思维如何打开新世界的大门。</p>
<h1 id="富兰克林传">《富兰克林传》</h1>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559616511348.webp" alt=""><br>
Benjamin Franklin</p>
<p>by Walter Isaacson</p>
<p>中文版</p>
<p>《富兰克林传》</p>
<p>沃尔特·艾萨克森 著</p>
<p>中信出版集团 | 2016.7<br>
<img src="http://jumpalang.5a1.xyz/post-images/1559616520461.webp" alt=""></p>
<blockquote>
<p>那些为了获得暂时的安全而放弃自由的人，既不配获得自由，也终将丧失安全。  ——本杰明·富兰克林</p>
</blockquote>
<p>美国开国元勋本杰明·富兰克林是硅谷科技企业家们最受推崇的一位名人。富兰克林除了在大革命中奠定了国家的根基，也是一位杰出的科学家和发明家。富兰克林发明避雷针、潜水脚蹼、双光眼镜、玻璃琴、图书馆用高架取书椅、富兰克林炉等等。</p>
<p>为了让自己具有足够的精力去从事发明活动，富兰克林创建了他独有的生产力系统，并在他的自传中对其进行了详细的描述和介绍。这令他的自传内容非常特别，像是发明者的自助书。</p>
<p>同样也是发明控的埃隆·马斯克这样评价到：富兰克林是真的了不起！嗯，是迷弟无疑了。</p>
<h1 id="自下而上万物进化史">《自下而上：万物进化史》</h1>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559616655753.webp" alt=""><br>
The Evolution of Everything (and anything)</p>
<p>by Matt Ridley</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559616616003.webp" alt=""><br>
《自下而上：万物进化史》</p>
<p>马特·里德利 著</p>
<p>机械工业出版社 | 2017.8<br>
<img src="http://jumpalang.5a1.xyz/post-images/1559616683011.webp" alt=""></p>
<blockquote>
<p>进化，就在我们的身边。它是我们了解人类以及自然世界如何变化的最佳方式。<br>
人类制度、人工制品和习惯的改变，都是渐进的、必然的、不可避免的。它遵循从一个阶段到下一个阶段的叙述方式；它慢慢推进而非跳跃式发展；它有自己自发的势头，不为外部力量所推动；它心里没有什么目标，也没有具体的终点；它基本上是靠不断地尝试与碰撞错误而产生的，而这也正是自然选择的一种形式。   ——《自下而上：万物进化史》</p>
</blockquote>
<p>长期以来，进化一直被用来解释一点一点小小的改变最终会具备重塑地球的力量这一过程，仅此而已。但作者马特·里德利没有局限于此。</p>
<p>通过列举各领域的大量案例，里德利阐述了进化的力量具体是如何在各个系统中发挥作用，促使其发生变化和迭代。本书展示了如何自下而上、仅仅通过迭代和交互来构建极其复杂的系统。</p>
<p>全美最大的股权众筹网站 AngelList 创始人 Naval Ravikant 是里德利的忠实拥趸者，他曾说过：“在我最喜欢的20本书中，马特·里德利的作品足足占了4席。”</p>
<h1 id="黑天鹅">《黑天鹅》</h1>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559616808619.webp" alt=""><br>
The Black Swan</p>
<p>by Nassim Nicholas Taleb</p>
<p>中文版</p>
<p>《黑天鹅》</p>
<p>纳西姆·塔勒布 著</p>
<p>中信出版集团 | 2011.10</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559616816706.webp" alt=""></p>
<blockquote>
<p>与其权衡事件发生的概率大或小，不如去衡量事件一旦发生可能带来多大的危害。  ——《黑天鹅：如何应对不可知的未来》<br>
《黑天鹅》是当下讲风险概率问题最具影响力的书之一。什么是黑天鹅事件？所谓黑天鹅事件是指小发生概率、但却会产生很大影响的事件，例如毁灭性的陨石撞击事件（恐龙的危机）或者是毁灭性的金融大崩溃（人类的危机）。</p>
</blockquote>
<p>除了《黑天鹅》之外，塔勒布“不确定性”系列丛书还包括：《随机漫步的傻瓜》、《反脆弱》和《非对称风险》。</p>
<p>如果说在《黑天鹅》中，塔勒布向我们揭示了罕见而不可预测的事件如何潜伏在世间万物的背后，那么《随机漫步的傻瓜》指出“随机性”是整个世界的运行方式。在《反脆弱》中，塔勒布又提出“反脆弱性”概念，以引导人们在“黑天鹅”的世界中继续生存下去，而增强自身的“反脆弱性”不能以牺牲他人的利益为代价。在《非对称风险》中，塔勒布进一步指出，人类社会应建立一种“做出决定”（权利）和“承担后果”（责任）相互平衡的机制，也特别强调了决策者本人的担当精神。</p>
<h1 id="人类简史">《人类简史》</h1>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559616909871.webp" alt=""><br>
Sapiens</p>
<p>by Yuval Noah Harari</p>
<p>中文版</p>
<p>《人类简史》</p>
<p>尤瓦尔·赫拉利 著</p>
<p>中信出版集团 | 2014.11</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559616916829.webp" alt=""></p>
<blockquote>
<p>历史只告诉我们极少数人在做些什么，而实际上大多数人就是在不停地挑水和耕地中度过。 ——《人类简史》</p>
</blockquote>
<p>这是一本万物大历史——关于我们人类的胜利、人类的文明和文化。很少有其他书能像这本书一样覆盖如此广泛的话题，而能做到像赫拉利这样有理有据的就更少了。</p>
<p>该书的主要观点之一是人类得以生存和繁荣发展的关键在于“讲故事的能力”。得益于故事的形成和讲述，我们才能在不同部落之间建立合作关系，进行交易、发动战争，通过宗教和神话的力量来形成紧密的联系。</p>
<p>这是一部宏大的人类简史，更见微知著、以小写大，让人类重新审视自己。虽然，赫拉利关于人类历史发展方面的一些看法存在争议性，但是，他所探讨的每一个议题都堪称横向思维和创造力的结晶。</p>
<h1 id="沉思录">《沉思录》</h1>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559617022451.webp" alt=""><br>
Meditations</p>
<p>by Marcus Aurelius</p>
<p>中文版<br>
《沉思录》是公版书，版本众多<br>
<img src="http://jumpalang.5a1.xyz/post-images/1559617026790.webp" alt=""><br>
豆瓣上评价比较高的是译林出版社在2009年出版的，译者是梁实秋。这本书的内地版基本就两位译者——梁实秋和何怀宏，大家按喜好选择吧。</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559617082420.webp" alt=""></p>
<blockquote>
<p>你有控制自己思想的力量，除此之外一切皆不可控。意识到这一点，你终将发现自身的优势。 ——《沉思录》</p>
</blockquote>
<p>《沉思录》是古代罗马皇帝马可·奥勒留的日记，记录了他对于美好生活的思考。他之前并无意将这些内容发表面世，但机缘巧合，这本书成为斯多葛哲学思想最重要的参考作品之一。硅谷科技巨头们从各个角度解读《沉思录》，提炼出“斯多葛主义”——一种训练心智的操作方法论。</p>
<p>马可·奥勒留在《沉思录》中详细记录了自己的生活：如何追求自律、节制、自控、驯服欲望、避免落入追求奢侈的陷阱以及避免自负。培养这些美德比追求幸福、快乐更重要。通过公正的行为，让自己顺应世界的秩序、达成内心的和平。</p>
<h1 id="雪崩">《雪崩》</h1>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559617196902.webp" alt=""><br>
Snow Crash</p>
<p>by Neal Stephenson</p>
<p>中文版<br>
<img src="http://jumpalang.5a1.xyz/post-images/1559617213535.webp" alt=""></p>
<p>《雪崩》</p>
<p>尼尔•史蒂芬森 著</p>
<p>四川科学技术出版社 | 2009</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559617235509.webp" alt=""></p>
<p>作为计算机赛博朋克小说的经典之作，《雪崩》的故事背景设置在有点乌托邦、又有点反乌托邦色彩的未来。美国政府垮台，美国社会彻底公司化，公司统治的微小国家成为新形式的政府。一场可以在生物上杀死程序员的病毒爆发。主人公 Hiro Protagonist 是一名黑客，当雪崩病毒爆发之后，他成为了制服这一计算机病毒的最佳人选。</p>
<p>《雪崩》也是硅谷科技企业家们忠爱之作，据LinkedIn创始人Reid Hoffman的朋友、也是PayPal的创始人Peter Thiel说，《雪崩》在1992年出版之后，Hoffman就迷上了它。当时的互联网世界与现在截然不同，社交媒体也不存在，但正是这本书在 Hoffman 的脑海中播下了一个庞大的社交网络的种子。Hoffman 在1999年将这一想法应用于实践，推出了SocialNet，虽然以失败告终，但这为2002年LinkedIn的诞生奠定了基础。</p>
<p>值得一提的是，在 Hoffman 钟情于《雪崩》的同时，另一位硅谷传奇人物比尔·盖茨力荐了作者史蒂芬森的另一本赛博朋克著作“SEVENEVES”（《七夏娃》）。这本书再次突破了人们的认知界限，将人类未来的生活图景放置在月亮爆炸后的七个星球上，黑科技的脑洞冲击自不在话下，更有意思的是，这位男性作家在男性抑或女性主宰未来世界这一问题上做出了值得玩味的设定，而这也成就了这本书充满想象空间的书名“七夏娃”。</p>
<h1 id="对赌">《对赌》</h1>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559617307851.webp" alt=""><br>
Thinking in Bets</p>
<p>by Annie Duke</p>
<p>中文版</p>
<p>《对赌》</p>
<p>安妮·杜克 著</p>
<p>中信出版社出品 | 2018.12</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559617317731.webp" alt=""></p>
<p>作者安妮·杜克是传奇职业扑克手，	世界扑克系列赛冠军、认知心理学博士，后来她成为了一名概率论的普及者，先后为多个世界500强企业提供决策咨询。作为职业扑克手，在信息不足时，扑克手需要在两分钟内做出20个决策，玩牌本质上是一场又一场的决策实验。这本书就是她“对赌”思维多年的集大成之作——在信息不对称的情况下如何做出有效决策。</p>
<p>网景创始人、硅谷著名投资人Marc Andreessen曾盛赞这本书：</p>
<blockquote>
<p>一本关于如何像扑克手或者风险投资人运用概率进行决策的实用手册。推荐给所有想知道这个真实世界运行法则的人一读。”</p>
</blockquote>
<h1 id="从0到1开启商业与未来的秘密">《从0到1：开启商业与未来的秘密》</h1>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559617450753.webp" alt=""><br>
Zero to One:</p>
<p>Notes on Startups, or How to Build the Future</p>
<p>by Peter Thiel<br>
中文版</p>
<p>《从0到1：开启商业与未来的秘密》</p>
<p>彼得·蒂尔 著</p>
<p>中信出版集团 | 2015.1</p>
<p><img src="http://jumpalang.5a1.xyz/post-images/1559617481049.webp" alt=""></p>
<blockquote>
<p>商业世界从零到一的时刻不会重演。下一个比尔·盖茨不会再开发操作系统，下一个拉里·佩奇或谢尔盖·布林是不会再研发搜索引擎，下一个马克·扎克伯格也不会去创建社交网络。 ——《从零到一：开启商业与未来的秘密》</p>
</blockquote>
<p>《从0到1》的作者是硅谷著名的创业者彼得·蒂尔，他曾在1998年创办了 PayPal，后来以15亿美元卖给eBay。之后彼得·蒂尔专注于金融投资和创业投资，曾投资过 Facebook 等著名企业。这本书浓缩了他几十年的硅谷创业心法，手把手教你如何打造一只独角兽企业。</p>
<p>彼得·蒂尔是个颇有争议的人物，不过在书中他有几大核心观点还是值得深思：1. 垄断不是坏事，实际上，企业应该尽快建立起自己的垄断性竞争力。2. 正确的选择比努力更重要，选对了“1”的方向，后面才有从1到1000的机会。3. 不要深陷竞争，而要研究如何绕开竞争。成功企业建立在未知的秘密上，所以不要复制别人的成功，因为所有成功的企业都是不同的。</p>
<h1 id="原文链接">原文链接</h1>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI4MzA1Mzg0Mg==&amp;mid=2649661379&amp;idx=1&amp;sn=0b044896188f8fb4306790bbf2e0d06e&amp;chksm=f38aa5bec4fd2ca8131b41bb4f60f1be5af62e6ff22a20b510fe5ecccfa2e6b0b6957453a966&amp;token=449027753&amp;lang=zh_CN#rd">跳转</a></p>
]]></content>
    </entry>
</feed>