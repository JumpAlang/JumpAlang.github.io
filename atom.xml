<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://m.alang.run</id>
    <title>Jump!Alang</title>
    <updated>2020-02-20T04:28:57.177Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://m.alang.run"/>
    <link rel="self" href="http://m.alang.run/atom.xml"/>
    <subtitle>永远年轻！永远热泪盈眶！</subtitle>
    <logo>http://m.alang.run/images/avatar.png</logo>
    <icon>http://m.alang.run/favicon.ico</icon>
    <rights>All rights reserved 2020, Jump!Alang</rights>
    <entry>
        <title type="html"><![CDATA[为什么大多数人穷其一生，终究一无所获？]]></title>
        <id>http://m.alang.run/post/wei-shi-me-da-duo-shu-ren-qiong-qi-yi-sheng-zhong-jiu-yi-wu-suo-huo/</id>
        <link href="http://m.alang.run/post/wei-shi-me-da-duo-shu-ren-qiong-qi-yi-sheng-zhong-jiu-yi-wu-suo-huo/">
        </link>
        <updated>2019-12-03T09:34:04.000Z</updated>
        <summary type="html"><![CDATA[<p>潜意识决定了你95%的人生。而潜意识你可以通过催眠、重复来改变。</p>
]]></summary>
        <content type="html"><![CDATA[<p>潜意识决定了你95%的人生。而潜意识你可以通过催眠、重复来改变。</p>
<!-- more -->
<div style="text-align:center;">
	 <div>
		<video controls="controls" >
		<source src="http://qiniu.alang.run//video/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%A7%E5%A4%9A%E6%95%B0%E4%BA%BA%E7%A9%B7%E5%85%B6%E4%B8%80%E7%94%9F%EF%BC%8C%E7%BB%88%E7%A9%B6%E4%B8%80%E6%97%A0%E6%89%80%E8%8E%B7%EF%BC%9F%E7%9C%8B%E6%95%99%E6%8E%88%E7%B2%BE%E8%BE%9F%E7%9A%84%E5%88%86%E6%9E%90%EF%BC%81.mp4" type="video/mp4" />
		</video>
	</div>
	</div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Outside》张钰琪NASA演唱]]></title>
        <id>http://m.alang.run/post/outside-zhang-yu-qi-nasa-yan-chang/</id>
        <link href="http://m.alang.run/post/outside-zhang-yu-qi-nasa-yan-chang/">
        </link>
        <updated>2019-11-26T12:50:21.000Z</updated>
        <summary type="html"><![CDATA[<div style="text-align:center;">
	<div>
			<audio  controls="controls"  autoplay="autoplay">
			<source src="http://qiniu.alang.run//music/outside%E6%9C%89%E5%89%AA%E8%BE%91.m4a" type="audio/mpeg" />
	</audio>
	</div>
</div>
]]></summary>
        <content type="html"><![CDATA[<div style="text-align:center;">
	<div>
			<audio  controls="controls"  autoplay="autoplay">
			<source src="http://qiniu.alang.run//music/outside%E6%9C%89%E5%89%AA%E8%BE%91.m4a" type="audio/mpeg" />
	</audio>
	</div>
</div>
<!-- more -->
<ul>
<li>Ten thousand meters high it is light which is magical<br>
万米高空中飘着迷人的极光</li>
<li>run out of my hope using my last strength to lying on the snow<br>
我希望不再用尽力气躺入雪中</li>
<li>Finally gonna know a place where I could put my soul<br>
终将有一个地方能安放灵魂</li>
<li>Try to leave in a calm way with only my god knows<br>
我在沉默中离开 只有上天知道</li>
<li>Coming for the night<br>
去向黑暗</li>
<li>We flying so high<br>
我们在飞行</li>
<li>My heart could cross millions of miles<br>
我的心跨越一千英里</li>
<li>I’m going to the wild<br>
去向自由</li>
<li>I going through the light<br>
越过光圈</li>
<li>And hearing the calling from the other side<br>
听见世界另一边的呼唤</li>
<li>I touch the universe I touch your hand<br>
触摸宇宙 触碰指尖</li>
<li>Your eyes are like the pure sapphire<br>
你的眼睛像纯净蓝宝石</li>
<li>The river would run for another thousand so do we could be remained forever<br>
银河将再流淌下一个一千年就像我们永不改变</li>
</ul>
<div style="text-align:center;">
	 <div>
		<video controls="controls" >
		<source src="http://qiniu.alang.run//video/%E9%92%B0%E7%90%AA%E7%99%BB%E7%BE%8E%E5%9B%BDNASA%E9%A2%81%E5%A5%96%E7%A4%BC%E7%8C%AE%E5%94%B1%EF%BC%8C%E5%8E%9F%E5%88%9B%E3%80%8AOutside%E3%80%8B.mp4" type="video/mp4" />
		</video>
	</div>
	</div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[thingsboard gateway http扩展匹配多级路径]]></title>
        <id>http://m.alang.run/post/thingsboard-gateway-http-kuo-zhan-pi-pei-duo-ji-lu-jing/</id>
        <link href="http://m.alang.run/post/thingsboard-gateway-http-kuo-zhan-pi-pei-duo-ji-lu-jing/">
        </link>
        <updated>2019-11-13T02:47:43.000Z</updated>
        <summary type="html"><![CDATA[<p>调测http扩展时，发现转换器序列号中的url只能配置一级，如只支持<code>green</code>格式，不支持<code>green/1/2/3</code>之类多级。</p>
]]></summary>
        <content type="html"><![CDATA[<p>调测http扩展时，发现转换器序列号中的url只能配置一级，如只支持<code>green</code>格式，不支持<code>green/1/2/3</code>之类多级。</p>
<!-- more -->
<h1 id="问题分析">问题分析</h1>
<p>查看HttpController源码：</p>
<pre><code class="language-java">@RequestMapping(value = &quot;/uplink/{converterId}&quot;, method = RequestMethod.POST)
    public void handleRequest(@PathVariable String converterId,
                                            @RequestBody String body) throws Exception {
</code></pre>
<p>发现是使用springmvc的@PathVariable来匹配路径，而@PathVariable只支持一级路径，如下是大佬的原话：</p>
<blockquote>
<p>它在做匹配时直接会把green/report切成green和report两段，每段去和pattern的每一段匹配。</p>
</blockquote>
<p>大佬给出的建议是：</p>
<ol>
<li>修改antmatcher源码</li>
<li>/**去匹配，然后手工去拿最后一段</li>
</ol>
<p>选择了第二种方法，比较方便。<br>
带着问题找答案，找到一篇文章：<br>
<a href="https://blog.csdn.net/jiangxuexuanshuang/article/details/51720362">https://blog.csdn.net/jiangxuexuanshuang/article/details/51720362</a></p>
<h1 id="源码修改">源码修改</h1>
<p>把路径匹配的<code>/uplink/{converterId}</code>改成用<code>/**</code>去匹配：<code>/uplink/**</code>,然后写方法去提取这个<code>**</code>里面的内容。</p>
<pre><code class="language-java">@RequestMapping(value = &quot;/uplink/**&quot;, method = RequestMethod.POST)
    public void handleRequest(HttpServletRequest request,
                                            @RequestBody String body) throws Exception {
                        String converterId = extractPathFromPattern(request);
                        service.processRequest(converterId, null, body);              
    }

    private String extractPathFromPattern(final HttpServletRequest request) {
        String path = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);
        String bestMatchPattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);
        return new AntPathMatcher().extractPathWithinPattern(bestMatchPattern, path);
    }
</code></pre>
<h1 id="测试">测试</h1>
<p>至thingsboard的设备管理下配置完网关的http扩展后，使用postman测试新增的http转换器：<br>
<img src="http://m.alang.run/post-images/1573616229936.png" alt="" loading="lazy"></p>
<h1 id="总结">总结</h1>
<p>暂无</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[thingsboard网关扩展与tb同步的理解]]></title>
        <id>http://m.alang.run/post/thingsboard-wang-guan-kuo-zhan-yu-tb-tong-bu-de-li-jie/</id>
        <link href="http://m.alang.run/post/thingsboard-wang-guan-kuo-zhan-yu-tb-tong-bu-de-li-jie/">
        </link>
        <updated>2019-11-04T07:20:31.000Z</updated>
        <summary type="html"><![CDATA[<p>最近由于要经常操作网关扩展，如添加http扩展，新增mqtt扩展的映射。经常出现网关不同步问题。导致了经过网关的数据，设备有创建，但是没有相应遥测数据，之前有看过群里大佬写过thingsboard网关与tb配置同步的源码分析：</p>
<blockquote>
<p><a href="https://blog.csdn.net/Zzhou1990/article/details/102477059">https://blog.csdn.net/Zzhou1990/article/details/102477059</a> <em><strong>Thingsboard Gateway 根据云端配置初始化</strong></em></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<p>最近由于要经常操作网关扩展，如添加http扩展，新增mqtt扩展的映射。经常出现网关不同步问题。导致了经过网关的数据，设备有创建，但是没有相应遥测数据，之前有看过群里大佬写过thingsboard网关与tb配置同步的源码分析：</p>
<blockquote>
<p><a href="https://blog.csdn.net/Zzhou1990/article/details/102477059">https://blog.csdn.net/Zzhou1990/article/details/102477059</a> <em><strong>Thingsboard Gateway 根据云端配置初始化</strong></em></p>
</blockquote>
<!-- more -->
<h1 id="前记">前记</h1>
<p>以下纯属本人臆想推测，难免会有疏漏。欢迎看者多加指正，互相进步。</p>
<h1 id="理解大佬源码分析">理解大佬源码分析</h1>
<p>从大佬文章中，大致可以理解成:当网关配置与thingsboard互通后，并允许thingsboard远程更新，则网关中连接thingsboard mqtt broker的mqtt客户端有订阅了属性更新主题<code>v1/devices/me/attributes</code>，用于实时获取共享属性更新。每当在thingsboard平台上配置网关扩展，thingsboard就会自动将配置信息保存为共享属性<code>configuration</code>的值。此时网关中的mqtt客户端监听到共享属性更新，会根据共享属性值重新初始化网关扩展配置。而后再把相应扩展配置上传至网关客户端属性<code>appliedConfiguration</code>,见如下代码：</p>
<pre><code class="language-java">private void updateConfiguration(String configuration) {
        try {
            if (extensionsConfigListener != null) {
                extensionsConfigListener.accept(configuration);
            }
            onAppliedConfiguration(configuration);
        } catch (Exception e) {
            log.warn(&quot;Failed to update extension configurations [[]]&quot;, e.getMessage(), e);
        }

public void onAppliedConfiguration(String configuration) {
        byte[] msgData = toBytes(newNode().put(&quot;appliedConfiguration&quot;, configuration));
        persistMessage(DEVICE_ATTRIBUTES_TOPIC, msgIdSeq.incrementAndGet(), msgData, null, null,
                error -&gt;
                        log.warn(&quot;Could not publish applied configuration&quot;, error));
    }
</code></pre>
<h1 id="同步状态判断依据">同步状态判断依据</h1>
<p>查阅thingsboard ui模块下的如下文件：<br>
<code>D:\JAVA\iot\code\thingsboard\ui\src\app\extension\extension-table.directive.js</code><br>
确认同步方法：</p>
<pre><code class="language-js">function reloadExtensions() {
        vm.subscribed = false;
        vm.allExtensions.length = 0;
        vm.extensions.length = 0;
        vm.extensionsPromise = attributeService.getEntityAttributesValues(vm.entityType, vm.entityId, types.attributesScope.shared.value, [&quot;configuration&quot;]);
        vm.extensionsPromise.then(
            function success(data) {
                if (data.length) {
                    vm.allExtensions = angular.fromJson(data[0].value);
                } else {
                    vm.allExtensions = [];
                }

                vm.selectedExtensions = [];
                updateExtensions();
                vm.extensionsPromise = null;
            },
            function fail() {
                vm.extensions = [];
                vm.selectedExtensions = [];
                updateExtensions();
                vm.extensionsPromise = null;
            }
        );
    }

function updateExtensions() {
        vm.selectedExtensions = [];
        var result = $filter('orderBy')(vm.allExtensions, vm.query.order);
        // $log.info(result);
        if (vm.query.search != null) {
            result = $filter('filter')(result, function(extension) {
                if(!vm.query.search || (extension.id.indexOf(vm.query.search) != -1) || (extension.type.indexOf(vm.query.search) != -1)) {
                    return true;
                }
                return false;
            });
        }
        vm.extensionsCount = result.length;
        var startIndex = vm.query.limit * (vm.query.page - 1);
        vm.extensions = result.slice(startIndex, startIndex + vm.query.limit);

        vm.extensionsJSON = angular.toJson(vm.extensions);
        checkForSync();
    }

function subscribeForClientAttributes() {
        if (!vm.subscribed) {
            if (vm.entityId &amp;&amp; vm.entityType) {
                $scope.subscriber = {
                    subscriptionCommands: [{
                        entityType: vm.entityType,
                        entityId: vm.entityId,
                        scope: 'CLIENT_SCOPE'
                    }],
                    type: 'attribute',
                    onData: function (data) {
                        if (data.data) {
                            onSubscriptionData(data.data);
                        }
                        vm.subscribed = true;
                    }
                };
                telemetryWebsocketService.subscribe($scope.subscriber);
            }
        }
    }

function onSubscriptionData(data) {
         // $log.info(data);
        if ($.isEmptyObject(data)) {
            vm.appliedConfiguration = undefined;
        } else {
            if (data.appliedConfiguration &amp;&amp; data.appliedConfiguration[0] &amp;&amp; data.appliedConfiguration[0][1]) {
                vm.appliedConfiguration = data.appliedConfiguration[0][1];
            }
        }

        updateExtensions();
        $scope.$digest();
    }

function checkForSync() {
         // $log.info(&quot;app:&quot;+vm.appliedConfiguration);
         // $log.info(&quot;ext:&quot;+vm.extensionsJSON);
        if (vm.appliedConfiguration &amp;&amp; vm.extensionsJSON &amp;&amp; vm.appliedConfiguration === vm.extensionsJSON) {
            vm.syncStatus = $translate.instant('extension.sync.sync');
            vm.syncLastTime = formatDate();
            $scope.isSync = true;
        } else {
            vm.syncStatus = $translate.instant('extension.sync.not-sync');

            $scope.isSync = false;
        }
    }
</code></pre>
<p>可以看出同步状态是通过判断网关的客户端属性<code>appliedConfiguration</code>与加工过的共享属性<code>configuration</code>值是否一致。<br>
同时发现一个自认为的bug：共享属性<code>configuration</code>会被排序加工成<code>extensionsJSON</code>,排序是根据扩展id升序排序的,所以会导致客户端属性与加工后的共享属性不一致，导致提示不同步，但好像并不影响使用：<br>
<code>var result = $filter('orderBy')(vm.allExtensions, vm.query.order);</code></p>
<pre><code class="language-js">vm.query = {
        order: 'id',
        limit: 5,
        page: 1,
        search: null
    };
</code></pre>
<p>所以我自己建议是添加网关扩展时id累加命名，如1_green,2_red。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[thingsboard gateway http扩展 创建设备、上传属性及遥测数据]]></title>
        <id>http://m.alang.run/post/thingsboard-gateway-http-kuo-zhan-shang-chuan-shu-xing-ji-yao-ce-shu-ju/</id>
        <link href="http://m.alang.run/post/thingsboard-gateway-http-kuo-zhan-shang-chuan-shu-xing-ji-yao-ce-shu-ju/">
        </link>
        <updated>2019-11-01T08:02:53.000Z</updated>
        <summary type="html"><![CDATA[<p>thingsboard官网文档有介绍网关mqtt扩展的使用，http扩展的使用方法找了许久也未找到。于是就想从thinsboard pe版本中的http整合找下灵感。pe版本中的http整合其实也就是提供中间的一个整合器服务和转换器（可以转换json/text/binary(base64)），然后跟着这个线索去查看gateway的源码，发现有一个controller有配置uplink上传链，至于downlink还待研究。<em><strong>对于thingsboard还是小白，如文章理解有误，希望看者多多帮忙指正，互相一起进步</strong></em></p>
]]></summary>
        <content type="html"><![CDATA[<p>thingsboard官网文档有介绍网关mqtt扩展的使用，http扩展的使用方法找了许久也未找到。于是就想从thinsboard pe版本中的http整合找下灵感。pe版本中的http整合其实也就是提供中间的一个整合器服务和转换器（可以转换json/text/binary(base64)），然后跟着这个线索去查看gateway的源码，发现有一个controller有配置uplink上传链，至于downlink还待研究。<em><strong>对于thingsboard还是小白，如文章理解有误，希望看者多多帮忙指正，互相一起进步</strong></em></p>
<!-- more -->
<h1 id="gateway源码查看">gateway源码查看</h1>
<p>在<code>HttpController</code>有如下方法：</p>
<pre><code class="language-java">@RequestMapping(value = &quot;/uplink/{converterId}&quot;, method = RequestMethod.POST)
    public void handleRequest(@PathVariable String converterId,
                              @RequestBody String body) throws Exception {
        service.processRequest(converterId, null, body);
    }
</code></pre>
<h1 id="gateway扩展配置">gateway扩展配置</h1>
<p>至thingsboard平台配置网关设备的扩展，新增http扩展。如下：<br>
<img src="http://m.alang.run/post-images/1572596736680.png" alt="" loading="lazy"><br>
<img src="http://m.alang.run/post-images/1572596746058.png" alt="" loading="lazy"><br>
<img src="http://m.alang.run/post-images/1572596750984.png" alt="" loading="lazy"><br>
<img src="http://m.alang.run/post-images/1572596757416.png" alt="" loading="lazy"></p>
<h1 id="postman调用http扩展url">postman调用http扩展url</h1>
<p>上一步骤我们配置了转换器序列号为green,网关默认开启端口号为9090，则http请求地址为：网关地址ip:9090/uplink/green。<br>
<img src="http://m.alang.run/post-images/1572599651241.png" alt="" loading="lazy"></p>
<h1 id="至tb平台上查看设备及数据">至tb平台上查看设备及数据</h1>
<figure data-type="image" tabindex="1"><img src="http://m.alang.run/post-images/1572599728628.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[postgresql-11.5.1安装timescaledb-1.4.2后无法加载库解决方法]]></title>
        <id>http://m.alang.run/post/postgresql-1151-an-zhuang-timescaledb-142-hou-wu-fa-jia-zai-ku-jie-jue-fang-fa/</id>
        <link href="http://m.alang.run/post/postgresql-1151-an-zhuang-timescaledb-142-hou-wu-fa-jia-zai-ku-jie-jue-fang-fa/">
        </link>
        <updated>2019-10-19T17:08:27.000Z</updated>
        <summary type="html"><![CDATA[<p>之前为了尝鲜了，装了最新版的postgresql数据库，而后安装完时序数据库timescaledb报了如下错误<code>无法加载库 &quot;d:/program files/postgresql/11/lib/timescaledb-1.4.2.dll&quot;</code>，解决这个问题还是花费了不少时间，写在这希望能帮助遇到同样问题的人。</p>
]]></summary>
        <content type="html"><![CDATA[<p>之前为了尝鲜了，装了最新版的postgresql数据库，而后安装完时序数据库timescaledb报了如下错误<code>无法加载库 &quot;d:/program files/postgresql/11/lib/timescaledb-1.4.2.dll&quot;</code>，解决这个问题还是花费了不少时间，写在这希望能帮助遇到同样问题的人。</p>
<!-- more -->
<h1 id="查找原因">查找原因</h1>
<p>在各种google后，终于在timescaledb的github的issues看到有网友碰到同样的问题。<br>
<a href="https://github.com/timescale/timescaledb/issues/1398">https://github.com/timescale/timescaledb/issues/1398</a><br>
在其中找到了答案：</p>
<blockquote>
<p>You would need libeay32.dll and ssleay32.dll from the bin folder of the 11.4 installation.<br>
Zip file downloadable from here: https://get.enterprisedb.com/postgresql/postgresql-11.4-1-windows-x64-binaries.zip<br>
应该算官方的一个bug:最新版postgredql-11.5.1缺少两个dll, <strong>libeay32.dll</strong> 和 <strong>ssleay32.dll</strong>。</p>
</blockquote>
<h1 id="解决方案">解决方案</h1>
<p>至如下网址下载postgresql-11.4的安装包，然后找到bin下的这两个dll，复制到你安装的postgresql/bin目录下<br>
<a href="https://get.enterprisedb.com/postgresql/postgresql-11.4-1-windows-x64-binaries.zip">https://get.enterprisedb.com/postgresql/postgresql-11.4-1-windows-x64-binaries.zip</a><br>
或者至百度网盘下载我提取出来的dll：<br>
链接: <a href="https://pan.baidu.com/s/1ZTRL3ukfABm6rmzyy_-42Q&amp;shfl=shareset">https://pan.baidu.com/s/1ZTRL3ukfABm6rmzyy_-42Q&amp;shfl=shareset</a> 提取码: jdzb</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ThingsBoard修改logo]]></title>
        <id>http://m.alang.run/post/thingsboard-xiu-gai-logo-ji-biao-ti/</id>
        <link href="http://m.alang.run/post/thingsboard-xiu-gai-logo-ji-biao-ti/">
        </link>
        <updated>2019-10-16T16:35:26.000Z</updated>
        <summary type="html"><![CDATA[<p>本来以为很简单的事，但其中问题不断，写在此愿能帮助遇到同样问题的你。<br>
要实时查看logo替换效果，建议在热部署模式下运行，官方文档：<a href="https://thingsboard.io/docs/user-guide/contribution/how-to-contribute/#running-ui-container-in-hot-redeploy-mode">https://thingsboard.io/docs/user-guide/contribution/how-to-contribute/#running-ui-container-in-hot-redeploy-mode</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>本来以为很简单的事，但其中问题不断，写在此愿能帮助遇到同样问题的你。<br>
要实时查看logo替换效果，建议在热部署模式下运行，官方文档：<a href="https://thingsboard.io/docs/user-guide/contribution/how-to-contribute/#running-ui-container-in-hot-redeploy-mode">https://thingsboard.io/docs/user-guide/contribution/how-to-contribute/#running-ui-container-in-hot-redeploy-mode</a></p>
<!-- more -->
<h1 id="定制自己的logo">定制自己的logo</h1>
<p>我这边使用的是在线网页制作svg：<a href="https://c.runoob.com/more/svgeditor/">https://c.runoob.com/more/svgeditor/</a></p>
<ol>
<li>准备工作<br>
把thingsboard原logo(存在此路径下：<code>/UI/src/svg/log_tilte_white.svg</code>)导入在线制作svg网页</li>
<li>制作<br>
导入成功后按delete把导入的thingsboard logo背景删除（主要是为了保证图片尺寸跟原thingsboard大致一致）</li>
</ol>
<h1 id="编辑制作好的svg代码">编辑制作好的svg代码</h1>
<p>把thingsboard源logo的头部复制到你制作好的svg头部（个人理解主要是为了保证宽度高度的一致）</p>
<p>thingsboard源logo头部</p>
<pre><code class="language-html">&lt;svg id=&quot;svg2&quot; xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;320&quot; width=&quot;1543.4&quot; version=&quot;1.1&quot; xmlns:cc=&quot;http://creativecommons.org/ns#&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; viewBox=&quot;0 0 1543.4268 320.00026&quot;&gt;
</code></pre>
<h1 id="编译">编译</h1>
<p>把图片拷贝到thingsboard原位置，重新编译打包(要先把thingsboard根路径下的pom.xml中的license-maven-plugin插件注释了)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[thingsboard rpc大佬总结]]></title>
        <id>http://m.alang.run/post/thingsboard-rpc-da-lao-zong-jie/</id>
        <link href="http://m.alang.run/post/thingsboard-rpc-da-lao-zong-jie/">
        </link>
        <updated>2019-09-27T07:42:54.000Z</updated>
        <summary type="html"><![CDATA[<p>感谢大佬：@苏州-大侠，@杭州～三升水<br>
QQ群：China Thingsboard（726442610）</p>
]]></summary>
        <content type="html"><![CDATA[<p>感谢大佬：@苏州-大侠，@杭州～三升水<br>
QQ群：China Thingsboard（726442610）</p>
<!-- more -->
<h1 id="苏州-大侠">苏州-大侠</h1>
<p>1.正常 我们都是通过 mqtt，modbus，opc UA向TB抛数据<br>
2.如果想要通过TB下发指令或下发数据，就是通过tb的rpc<br>
3.tb有rpc的专属topic，对不同的协议(modbus ,mqtt,opc ua)有不同的格式<br>
4.tb下发rpc可以通过规则链，部件或调API<br>
5.如用gateway的modbus采集地址位的数据，如果想要修改地址位的数据，这时就用rpc下发数据，gateway接受到rpc的数据，就会写入地址中</p>
<h1 id="杭州~三升水">杭州～三升水</h1>
<p>1.首先我们理解RPC是什么意思，RPC和框架中的远程服务调用是一样的<br>
2.因为TB他不是单机的，就是有多个服务在一起部署的，多个机器是通过Akka模型进行通讯的<br>
3.他用grpc来进行服务的调用和消息在多个实例上传递<br>
4.这2个分别是用集群获取消息和发送消息，无论数据采集还有其他<br>
<img src="http://m.alang.run/post-images/1569571494278.jpg" alt="" loading="lazy"><br>
<img src="http://m.alang.run/post-images/1569571500277.jpg" alt="" loading="lazy"><br>
5.TB把单机版和集群的API做了个区分<br>
6.所以你会看到2套API,总结就是，你不是集群部署的话，rpc那套用处不大，上面采集的接口（<code>就是mqtt,coap,http的通过主题发送消息</code>）也能满足你的要求<br>
7.像这种，就是那种多个集群在一起通信的，交互消息的终端打印信息<br>
<img src="http://m.alang.run/post-images/1569571672429.jpg" alt="" loading="lazy"><br>
8.网关的作用主要是对于单体没有联网能力的设备，从自组网或者局域网中，到一个有联网能力的设备上，统一上传数据</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[thingsboard rest api使用准备]]></title>
        <id>http://m.alang.run/post/thingsboard-rest-api-shi-yong-zhun-bei/</id>
        <link href="http://m.alang.run/post/thingsboard-rest-api-shi-yong-zhun-bei/">
        </link>
        <updated>2019-09-25T00:33:17.000Z</updated>
        <summary type="html"><![CDATA[<p>服务器端核心API</p>
]]></summary>
        <content type="html"><![CDATA[<p>服务器端核心API</p>
<!-- more -->
<p>访问地址格式：http://YOUR_HOST:PORT/swagger-ui.html<br>
如官网示例为：<a href="http://demo.thingsboard.io/swagger-ui.html">http://demo.thingsboard.io/swagger-ui.html</a></p>
<p>要使用api之前，要先取得调用api的token。</p>
<h1 id="获取token">获取token</h1>
<p>post请求地址：http://THINGSBOARD_URL/api/auth/login，如官网示例则为：http://demo.thingsboard.io/api/auth/login<br>
postman调用样例，这边以我本地为例：<br>
<img src="http://m.alang.run/post-images/1569372720394.png" alt="" loading="lazy"></p>
<h1 id="调用api准备">调用api准备</h1>
<p>调用api可以直接使用swagger-ui.html也可以在postman。</p>
<ul>
<li>swagger-ui调用api准备<br>
在Swagger UI右上角的“Authorize”按钮填充api_key，api_key为&quot;Bearer &quot;+token,记得Bearer后面有个空格。<br>
<img src="http://m.alang.run/post-images/1569373125236.png" alt="" loading="lazy"></li>
<li>postman调用api准备<br>
要在header加上X-Authorization<br>
<img src="http://m.alang.run/post-images/1569373400730.png" alt="" loading="lazy"></li>
</ul>
<h1 id="参考">参考</h1>
<p><a href="https://thingsboard.io/docs/reference/rest-api/">https://thingsboard.io/docs/reference/rest-api/</a> REST API</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[thingsboard gateWay概述]]></title>
        <id>http://m.alang.run/post/thingsboard-gateway-gai-shu/</id>
        <link href="http://m.alang.run/post/thingsboard-gateway-gai-shu/">
        </link>
        <updated>2019-09-24T00:46:02.000Z</updated>
        <summary type="html"><![CDATA[<p>thingsboard网关可让您将与旧式和第三方系统连接的IoT设备与ThingsBoard集成在一起。<br>
网关是ThingsBoard中的一种特殊类型的设备，能够充当连接到不同系统的外部设备和ThingsBoard之间的桥梁。网关API提供了使用单个MQTT连接在多个设备和平台之间交换数据的功能。网关还充当ThingsBoard设备，并且可以利用现有的MQTT Device API来报告统计信息，接收配置更新等等。</p>
]]></summary>
        <content type="html"><![CDATA[<p>thingsboard网关可让您将与旧式和第三方系统连接的IoT设备与ThingsBoard集成在一起。<br>
网关是ThingsBoard中的一种特殊类型的设备，能够充当连接到不同系统的外部设备和ThingsBoard之间的桥梁。网关API提供了使用单个MQTT连接在多个设备和平台之间交换数据的功能。网关还充当ThingsBoard设备，并且可以利用现有的MQTT Device API来报告统计信息，接收配置更新等等。</p>
<!-- more -->
<h1 id="架构">架构</h1>
<p>对平台来说网关是一个设备：只不过网关的消息体和其他设备不一样，网关监听的是消息代理发送的消息。针对MQTT来说，网关只不过选择性监听了topic，构建了一个映射“map”关系。<br>
<img src="http://m.alang.run/post-images/1569286524998.png" alt="" loading="lazy"></p>
<h1 id="可以解决什么问题">可以解决什么问题</h1>
<p>现实中大部分都是通过网关操作设备的，不管是MQTT还是modbus或者opc。<br>
问题一：如果你有1万台设备如何连接： 若是你有一万个设备，不可能一个一个用token去连的。<br>
网关就解决了这个问题，简单 的说，通过网关，是管理一批设备，不通过网关，是管理一个设备。</p>
<h1 id="功能">功能</h1>
<ul>
<li>MQTT扩展，用于控制，配置和收集使用现有协议连接到外部MQTT代理的IoT设备的数据。</li>
<li>OPC-UA扩展，用于从连接到OPC-UA服务器的IoT设备收集数据。</li>
<li>Sigfox扩展，用于从连接到Sigfox后端的IoT设备收集数据。</li>
<li>Modbus扩展可从通过Modbus协议连接的IoT设备收集数据。</li>
<li>在网络和硬件故障的情况下，所收集数据的持久性可确保数据传输。</li>
<li>自动重新连接到ThingsBoard集群。</li>
<li>简单但功能强大的将传入数据和消息映射为统一格式。</li>
</ul>
<h1 id="内部机制">内部机制</h1>
<p>例如，下面列出的默认映射将强制网关订阅传感器主题，并将传入的JSON消息中的serialNumber用作设备名称。类似地，模型和温度 json对象字段将映射到相应的ThingsBoard设备属性和遥测字段。</p>
<pre><code class="language-json">{
  &quot;topicFilter&quot;: &quot;sensors&quot;,
  &quot;converter&quot;: {
    &quot;type&quot;: &quot;json&quot;,
    &quot;filterExpression&quot;: &quot;&quot;,
    &quot;deviceNameJsonExpression&quot;: &quot;${$.serialNumber}&quot;,
    &quot;attributes&quot;: [
      {
        &quot;type&quot;: &quot;string&quot;,
        &quot;key&quot;: &quot;model&quot;,
        &quot;value&quot;: &quot;${$.model}&quot;
      }
    ],
    &quot;timeseries&quot;: [
      {
        &quot;type&quot;: &quot;double&quot;,
        &quot;key&quot;: &quot;temperature&quot;,
        &quot;value&quot;: &quot;${$.temperature}&quot;
      }
    ]
  }
}
</code></pre>
<h1 id="参考">参考</h1>
<p><a href="https://thingsboard.io/docs/iot-gateway/what-is-iot-gateway/">https://thingsboard.io/docs/iot-gateway/what-is-iot-gateway/</a> <em>什么是ThingsBoard IoT网关？</em><br>
<a href="https://thingsboard.io/docs/iot-gateway/getting-started/">https://thingsboard.io/docs/iot-gateway/getting-started/</a> <em>ThingsBoard IoT网关入门</em><br>
<a href="https://thingsboard.io/docs/reference/gateway-mqtt-api/">https://thingsboard.io/docs/reference/gateway-mqtt-api/</a> <em>MQTT网关API参考</em></p>
]]></content>
    </entry>
</feed>