<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://git.alang.run</id>
    <title>Jump!Alang</title>
    <updated>2021-06-08T06:43:16.255Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://git.alang.run"/>
    <link rel="self" href="http://git.alang.run/atom.xml"/>
    <subtitle>永远年轻！永远热泪盈眶！</subtitle>
    <logo>http://git.alang.run/images/avatar.png</logo>
    <icon>http://git.alang.run/favicon.ico</icon>
    <rights>All rights reserved 2021, Jump!Alang</rights>
    <entry>
        <title type="html"><![CDATA[C# dll附加打包到exe里]]></title>
        <id>http://git.alang.run/post/c-dll-fu-jia-da-bao-dao-exe-li/</id>
        <link href="http://git.alang.run/post/c-dll-fu-jia-da-bao-dao-exe-li/">
        </link>
        <updated>2021-04-01T01:53:54.000Z</updated>
        <summary type="html"><![CDATA[<p>由于微信内存注入，注入器与dll是分开的。现想把其打包在一起，以免dll文件被人直接拿去用。</p>
]]></summary>
        <content type="html"><![CDATA[<p>由于微信内存注入，注入器与dll是分开的。现想把其打包在一起，以免dll文件被人直接拿去用。</p>
<!-- more -->
<h1 id="思考">思考</h1>
<p>刚开始是想把dll引用到注入器代码里，但是dll引用不进去 ，可能是有所混淆。<br>
后面百度了一番，把dll当作资源加进去，并要把生成操作改成嵌入式资源（未验证此处是否可忽略）。<br>
当程序一加载释放dll资源到指定的位置。</p>
<h1 id="步骤">步骤</h1>
<ol>
<li>创建Resources文件夹，并把dll拷贝进去</li>
<li>右击项目，资源，添加其他文件，并dll添加进去</li>
<li>点击dll修改生成操作为嵌入式资源</li>
<li>修改代码，释放dll到相应位置<br>
释放到 <code>c:\\windows\system32</code>会dll被另一进程使用，后面只能释放到用户的公共数据存放那边<pre><code class="language-C#">         //释放dll
         string path = System.Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

         if (!File.Exists(path + @&quot;\wxidAndGroupName.dll&quot;))
         {
             byte[] Save = global::L000WeChatDllInjector.Properties.Resources.wxidAndGroupName;
             FileStream fsObj = new FileStream(path + @&quot;\wxidAndGroupName.dll&quot;, FileMode.CreateNew);
             fsObj.Write(Save, 0, Save.Length);
             fsObj.Close();
             //现在到系统目录中找一下释放的资源.dll吧
         }
</code></pre>
</li>
</ol>
<h1 id="总结">总结</h1>
<p>此方法释放dll还是隐患，如果用户知道此dll释放位置，就前功尽弃。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《内外兼修(程序员的成长之路)》摘录]]></title>
        <id>http://git.alang.run/post/lesslessnei-wai-jian-xiu-cheng-xu-yuan-de-cheng-chang-zhi-lu-greatergreater-zhai-lu/</id>
        <link href="http://git.alang.run/post/lesslessnei-wai-jian-xiu-cheng-xu-yuan-de-cheng-chang-zhi-lu-greatergreater-zhai-lu/">
        </link>
        <updated>2021-03-21T06:11:54.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>我们要学习新知识，第一步其实是要说服缘脑，让缘脑觉得知识不那么陌生，减少缘脑的阻碍，这样学习新知识就不觉得那么困难了。</li>
<li>每一种新的学习技巧从本质上来说都是一种新的行为模式，因此这些技巧对于缘脑来说无一例外都是一种挑战。不管我们至今惯用的学习方法多么低效，缘脑都会固执地认为：反正我一直都用这种方式学习和思考，而且我至今都活得好好的，因此自然没有必要冒险去改变。</li>
<li>只要我们亲身体会到新的行为模式对自己有益无害，缘脑就会做出相应的反应，逐渐将这种新习惯定位为积极情绪的催化剂。这样一来，它就会转而支持这种新习惯的发展，而非总是屏蔽了。随着练习次数的增多，原有习惯将会逐渐改变其原有的方向，新的行为模式就会轻而易举地融入其中了。</li>
<li>对要学的新知识我们要了解其整体知识结构，对整体有了印象之后再去仔细学习。如果我们是看一本书，先花5分钟时间快速浏览全书，这一步就好比在拼拼图的时候先拼完四条边，由此得来的粗略的整体印象能够给我们的缘脑发出积极的信息，让它感觉更加安全，也能让你看清你拼到了什么位置。</li>
<li>我们在与人沟通时怎样打消对方的防备心？<br>
你需要先用一两句话说清楚沟通的大概内容和沟通的目的，让对方的缘脑对你后面要说的事情有个大概的了解，到具体说的时候，便可减少缘脑的阻碍，从而降低对方的防备心。<br>
讲课也是一样，讲课时如果先说服了学生的缘脑，然后再讲具体内容，学生听着会更容易接受。听我讲过课的同学都知道我有个习惯，我在讲课的PPT上总会有一个目录页，在目录页给大家说清楚我要讲哪几个大部分，各部分的关系是什么，也会说说新学的知识与以前学过的知识的关联，这都是在说服大家的缘脑，让大家不要对下面讲的新知识太排斥。</li>
<li>如何才能形成自己的理解？<br>
我一般对一个知识会看三个不同作者的观点，每一个作者的角度和看法都不一样。综合多个人的不同观点才能形成自己的理解。</li>
<li>瀑布练习<br>
在瀑布练习中，我们需要分别训练自己的五大感官，再将其结合起来，达到最佳效果。此外，这个练习也是一种锻炼注意力非常有效的练习。记忆力和注意力往往是密不可分的，这个练习也可以帮助我们放松。由此可见，瀑布练习绝对是我们训练计划中必不可少的一个部分。每当你在学习的过程中感到疲倦或是发现自己脑子不好使的时候，就可以闭上眼睛，靠在椅背上，花上两分钟的时间来完成这个练习。如果你学得疲惫不堪，甚至出现腰酸背痛或者头痛的症状，那就说明你的学习方式确实出现了问题，你的身体已经不堪重负、表示抗议了，长此以往，你很可能再也找不回那种正常，健康的学习状态了。因此，我提醒大家一定要留意类似的现象，只要发现一点蛛丝马迹就要及时采取措施，改变身体上的不适。<br>
请大家想象自己正在热带的某个岛屿上度假，你身穿鲜艳的泳衣，浸在清凉的湖水中。现在，请你朝着湖边的小瀑布游去。在前两分钟的时间里，重点是要激活自己的视觉渠道。因此，请你集中精力想象一下自己看到的景象。当你站在瀑布下面时，你看见了什么？湖水是什么颜色的？在想象这个细节的过程中，我们可以暂时忘记其他感官。不过，刚开始练习的时候我们一般很难将其中一种感官与其他感官完全分开。要么我们会突然想起皮肤接触湖水时的感觉，要么会想到哗啦啦的水声，我们思绪甚至飘到毫不相干的地方，想起其他与瀑布无关的事情。不过这都不要紧，它反而能够让我们很好地判断自己当前的记忆力程序和注意力集中的程度。<br>
大概两分钟以后，请你重新回到刚才的学习上去，继续阅读 如果过了一段时间以后，你又感觉到集中注意力有困难或者身体有了轻微的压力，那就暂停一下，用两分钟时间完成第二遍瀑布练习。这次，请大家将注意力集中在听觉渠道上。你站在瀑布下面时能够昕到什么声音？与上一次相同，请大家尽力屏蔽真他感官的感觉。同理，下一次练习时就要重点关注触觉，想象一下站在瀑布下面的感觉。<br>
这个练习我们可以连续几天反复做。刚开始的时候，练习的重点在于适应这种无中生有的想象。只要我们能够控制自己的想象一直停留在瀑布这个主题或者同一感官渠道上面，那就成功地达到练习的目的了 练习几遍以后，我们的记忆力和注意力应该已经初步得到改善，我们能十分轻松地开始自己的想象。从这个时候开始，我们要在每次练习的两分钟内，同时关注两个不同的感官渠道，比如我们同时练习视觉和听觉，在想象具体图像的同时，也关注耳朵可能听见的声响。水声究竟有多大？是否能够听见风吹过树林的声音？此外，你可<br>
以将视觉和触觉，或者听觉和嗅觉相结合等两两结合没再难度以后，再试着选择任三种感官来进行练习。你会发现，调用的感官越多，我们的主观体验越丰富。在这个练习中，我们强调从单一渠道开始，逐渐适应，因为如果急功近利的话，感觉就会大不一样。我们将无法集中注意力锻炼每个单独的感官，导致每一种感觉都不够强烈，最终结合的效果也不会那么真实。所以，请大家耐心一点。最后，大家还可以尝试加入嗅觉和味觉，这样体验也会十分有趣。<br>
等到瀑布练习很熟练，你能清晰地结合多个感官时，再重复瀑布练习已经没再难度且感觉没有新鲜感时，可以换一些主题，如“沙漠 、“森林”、“冰川”等。训练方式和瀑布练习一样，先只练习一个感官，再结合多个感官，每次练习两分钟左右，注意力要集中在自己定义的主题上。</li>
<li>随时随地训练自己的感宫<br>
既然我们在学习时，大部分人是通过阅读来获取知识的，那么在刚开始练习的时候，强化视觉渠道自然是重中之重了。此外，视觉渠道从本质上来说也是获取信息最高效的渠道。其实，我们可以随时随地训练自己的视觉渠道，尤其是在等车或等人的时候，我们更应该充分利用这些零散的时间，仔细观察一下周围的事物。车站的大幅海报、街对面的某栋大厦都是很好的练习素材。你可以给自己限定一两分钟的观察时间，然后闭上眼睛，在脑海里尽可能地回忆刚才看到的每一个细节，循环往复，直到几分钟后真实的画像与自己的想象完全一致。对于有些人来说，这种闭上眼睛重现某一场景的练习做起来多少会有点困难。不过对于任何一种能力而言，关键都在于持续不断地练习。当脑海中头一次出现一幅清晰的画面时，你一定会感觉到由衷的快乐和满足。</li>
<li>一个人在接收与处理信息时调用的感官渠道越多。最终牢固记忆的内容也就越多。从根本上来说，这是因为每一类信息在大脑中的存储位置不同。由此可见，当我们用多个感官来认知同一个事物时，调用的感官渠道越多，最终牢固记忆的内容也就越多。当我们用多个感官来认知同一个事物时，相当于在大脑的不同分区重复储存了同一条信息。在学知识看书时，除了把读到的文字信息储存在视觉区域，还在听觉、触觉、嗅觉和味觉区域都搞了一套备份。等到需要提取信息的时候，我们就有五个不同却又相通的渠道，回忆起来自然容易多了。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[给.exe桌面软件增加使用限制]]></title>
        <id>http://git.alang.run/post/gei-exe-zhuo-mian-ruan-jian-zeng-jia-shi-yong-xian-zhi/</id>
        <link href="http://git.alang.run/post/gei-exe-zhuo-mian-ruan-jian-zeng-jia-shi-yong-xian-zhi/">
        </link>
        <updated>2021-03-17T09:40:07.000Z</updated>
        <summary type="html"><![CDATA[<p>最近，小伙伴有开发了一个冷门小软件，想采取按软件打开次数收费。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近，小伙伴有开发了一个冷门小软件，想采取按软件打开次数收费。</p>
<!-- more -->
<h1 id="思考">思考</h1>
<p>由于使用软件的用户都是电脑小白，为了省功夫，就想到了直接本地验证即可。<br>
于是开始提取关键词：软件加壳、次数限制……</p>
<h1 id="柳暗花明">柳暗花明</h1>
<p>经历一系列搜索碰壁，终于找到一款软件可以满足此功能（最开始找到吾爱的文章是正解 <a href="https://www.52pojie.cn/thread-220148-1-1.html">https://www.52pojie.cn/thread-220148-1-1.html</a>）。<br>
** Shielden ** 来自safe engine团队。而且是免费的。<br>
不仅可以设置软件打开次数，还可以设置有效期。<br>
下载地址：<a href="http://www.safengine.com/downloads/get-demo">http://www.safengine.com/downloads/get-demo</a></p>
<h1 id="使用注意">使用注意</h1>
<ol>
<li>设置使用默认的</li>
<li>需要特殊设置的地方 ：授权选项-启用授权系统，默认授权菜单是可以展开的，设置限制运行次数为0</li>
<li>修改自定义提示为你想提醒的文字</li>
<li>执行完毕后会生成被加密后的exe文件和一个用于生成授权文件的生成器。</li>
</ol>
<h1 id="总结">总结</h1>
<p>以后对于小众小工具软件可以采用授权机制收费，这样才会长远。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ipad3 3.10.4安装微信及QQ]]></title>
        <id>http://git.alang.run/post/ipad3-3104-an-zhuang-wei-xin-ji-qq/</id>
        <link href="http://git.alang.run/post/ipad3-3104-an-zhuang-wei-xin-ji-qq/">
        </link>
        <updated>2021-02-28T07:51:48.000Z</updated>
        <summary type="html"><![CDATA[<p>发小从闲鱼上买了台二手ipad4，800大洋，想用来挂微信及QQ。可从app store安装微信或者QQ总是下载完后提示无法安装。</p>
]]></summary>
        <content type="html"><![CDATA[<p>发小从闲鱼上买了台二手ipad4，800大洋，想用来挂微信及QQ。可从app store安装微信或者QQ总是下载完后提示无法安装。</p>
<!-- more -->
<h1 id="互联网查找解决方案">互联网查找解决方案</h1>
<p>于是Google了一番，终于找到个大牛分享的视频教程：<br>
<a href="https://www.bilibili.com/video/av838195980">iPad4登陆微信提示版本低，全过程完整版视频来啦！快快登陆吧！<br>
</a></p>
<h1 id="总体思路">总体思路</h1>
<p>大致思路：安装支持ipad4的微信版本7.0.2，安装后登录会提示版本过低，只要越狱后，把微信安装目录下的info.plist中微信版本号改成目前最新版本号即可。<br>
大致流程如下：</p>
<ol>
<li>ipad必须先越狱</li>
<li>安装afc2</li>
<li>在ipad端的爱思助手安装微信历史版本中的7.0.2</li>
<li>在电脑的爱思助手修改微信安装目录下的info.plist为最新版本号</li>
<li>先在ipad单独登录微信，不要手机+ipad同时登录</li>
<li>退出上一步单独的登录微信，使用ipad+手机同时登录</li>
</ol>
<h1 id="前期准备">前期准备</h1>
<ol>
<li>爱思助手7.0电脑端</li>
</ol>
<h1 id="可能出现的问题">可能出现的问题</h1>
<ul>
<li>cydia无法访问网络<br>
参照：<a href="https://www.bilibili.com/video/av370580939/">【教程】教你修正越狱后Cydia无法联网</a> 阴差阳错的解决了<br>
或者试下换个电信网络</li>
</ul>
<h1 id="安装qq">安装QQ</h1>
<p>QQ目前还不会强制要求安装最新版本，直接在ipad爱思助手下载历史版本试下哪个可行即可。</p>
<h1 id="总结">总结</h1>
<p>刚开始没看清楚视频教程，直接在爱思助手点了一键刷机，应该选择越狱才对的，脑子秀逗了。<br>
后面cydia网络问题也浪费了很多时间，后面解决也不知是因为换了电信网络还是看了视频教程操作生效，待验证。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[隐藏网页所有图片代码]]></title>
        <id>http://git.alang.run/post/yin-cang-wang-ye-suo-you-tu-pian-dai-ma/</id>
        <link href="http://git.alang.run/post/yin-cang-wang-ye-suo-you-tu-pian-dai-ma/">
        </link>
        <updated>2021-02-21T01:07:28.000Z</updated>
        <summary type="html"><![CDATA[<p>上班摸鱼，浏览网页，总是生怕网页图片惹人注目。遂想到写个js代码去掉图片，虽然chrome也有相关设置不加载图片，但还是感觉麻烦。</p>
]]></summary>
        <content type="html"><![CDATA[<p>上班摸鱼，浏览网页，总是生怕网页图片惹人注目。遂想到写个js代码去掉图片，虽然chrome也有相关设置不加载图片，但还是感觉麻烦。</p>
<!-- more -->
<p>以下代码，请在浏览器下，按f12，在console下输入：</p>
<pre><code class="language-js">let imgs2 =document.getElementsByTagName(&quot;img&quot;);for(var i = 0; i &lt; imgs2.length; i++){imgs2[i].style.display='none'}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《How to get rich》摘录]]></title>
        <id>http://git.alang.run/post/lesslesshow-to-get-richgreatergreater-zhai-lu/</id>
        <link href="http://git.alang.run/post/lesslesshow-to-get-richgreatergreater-zhai-lu/">
        </link>
        <updated>2021-02-18T08:13:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="寻求财富而不是金钱或地位">寻求财富，而不是金钱或地位</h1>
<ul>
<li>财富可以在你睡觉时赚钱的资产</li>
<li>财富会带来你的自由，可以拒绝的自由</li>
<li>金钱是我们转移财富的方式<br>
金钱是社会信用。如果我做的事情正确，如果我为社会创造了价值，社会说：”谢谢你，对于你过去所做的工作，我们欠你一些东西。这是一点点借条。”</li>
<li>财富是正和游戏（共赢），地位是零和游戏（损人利己）</li>
</ul>
<h1 id="为世界创造更多">为世界创造更多</h1>
<p>财富不是从别人那里拿走什么，而是为这个世界创造更多</p>
<ul>
<li>财富创造带来了世界的丰富<br>
显然没有限量的工作，或限量的财富。</li>
<li>自由市场是人类社会固有的<br>
这是一场美妙的比赛，值得我们从伦理上、理性上、道德上去挑战一次。它将继续使我们所有人越来越富有，直到我们为任何想要的人创造大量财富。</li>
<li>太多的索取者和没有足够的创造者会使社会陷入毁灭<br>
即使在自然界中，寄生虫也比非寄生生物更多。你身上有很多寄生虫，它们依赖于你。更好的是共生的，他们会回馈一些东西。<br>
想象一个有太多寄生虫的有机体。你需要一些少量的寄生虫来保持健康。你需要很多共生体。我们所有细胞中的所有线粒体都可以帮助我们呼吸和燃烧氧气。这些是帮助我们生存的共生体。没有他们，我们无法生存。<br>
任何生物体只能承受少量寄生虫。当寄生元素失去控制时，你就会死亡。</li>
</ul>
<h1 id="致富与运气无关">致富与运气无关</h1>
<ul>
<li>致富与运气无关，要掌握致富的技能
<ol>
<li>狗屎运</li>
<li>坚持不懈的实干运<br>
这种幸运来自于坚持、努力、不停的尝试和行动。当你四处奔波创造了各种各样的机会，这期间你输出了很多能量，你做了很多事情，会有大量的能量交换。</li>
<li>早有预备的运气<br>
第三种方法是你变得非常善于发现运气。如果你在某个领域非常精通，你会注意到在那个领域幸运的事件是如何发生的。当其他人没有注意到它的时候，你会变得对运气敏感，这是通过技能、认识和工作经验的积累达成的。</li>
<li>独特的人格给你带来的好运<br>
最后一种运气是最奇怪、最艰难的一种，但这就是我们要讨论的。在这里，你建立了一个独特的人格，一个独特的品牌，一个独特的心态，然后好运会找到你。<br>
例如，假设你是世界上最擅长深海潜水的人。大家都知道，你会进行别人都不敢尝试的深海潜水。然后，有人幸运的在海岸外发现了一艘沉没的宝藏船。他们没办法拿到，只能跑来找你求助。也就是说，他们的运气同时变成了你的运气，你会因此得到非常丰厚的报酬。这是一个比较极端的例子。那个找到宝藏的幸运儿们，走的是狗屎运。但他们不得不来找你帮忙把宝藏拿出来，最终你会得到一部分这里面的财富，这不是运气。也就是说，虽然这个好运的起始不是你，但是你能让那些发现好运的人在关键时刻想起你，很明显你可以在其中起到不可替代的作用。这种情况下你既成就了别人，又分享了他人的好运，这就是你为什么要打造自己独特的个性和品牌</li>
</ol>
</li>
</ul>
<h1 id="你必须有点异乎寻常才能独自走在前沿">你必须有点异乎寻常，才能独自走在前沿</h1>
<p>独自走在前沿可能需要你有点异乎寻常，而且愿意比一般人挖掘得更深，挖掘的更深仅仅因为你感兴趣。</p>
<h1 id="出租时间不会让你变得富有">出租时间不会让你变得富有</h1>
<ul>
<li>出租时间不会让你变得富有，因为你不能非线性地赚钱<br>
投入与产出相关性太强</li>
<li>出租时间赚钱意味着你很容易被替代</li>
<li>你必须拥有股权才能获得财务自由</li>
<li>追求一份投入与产出“不匹配”的工作<br>
一个职业的创造力成分越高，它就越有可能有不匹配的投入和产出。</li>
</ul>
<h1 id="我们应该升级自己的自由而不是生活方式">我们应该升级自己的自由，而不是生活方式</h1>
<p>生活水平远低于其收入水平的人们享受着一种自由，这种自由是那些忙于改善生活方式的人们无法理解的</p>
<ul>
<li>世界上最危险的东西是海洛因和月薪</li>
<li>理想的情况是，你的赚钱路径是离散的</li>
</ul>
<h1 id="给社会提供它不知道如何获得的东西">给社会提供它不知道如何获得的东西</h1>
<p>社会会因为你创造了它想要、却不知道如何大规模获取的东西，而给你丰厚的回报</p>
<ul>
<li>
<p>给社会它需要的，但不知道如何规模化获取的东西<br>
技术只是一套还不太管用的东西。一旦某样东西成功了，它就不再是技术了。所以，社会总是想要新事物。</p>
</li>
<li>
<p>想清楚你能提供的产品，然后考虑如何扩大规模<br>
你创造它只是因为你想要它。你想要它，需要它，所以你知道如何建造它。其实一开始你是为自己建造它。然后你要想办法把它带给其他人。如何把曾经只是富人拥有的东西给到给每个人。</p>
</li>
</ul>
<h1 id="互联网极大地丰富了职业发展的可能性">互联网极大地丰富了职业发展的可能性</h1>
<p>互联网会给你的小众兴趣找到买单的人</p>
<ul>
<li>
<p>互联网极大扩展了职业发展的可能性<br>
你要明白，借助互联网，你就总能为你的产品、你的才能、你的技艺找到观众，不论他们来自哪里。</p>
</li>
<li>
<p>互联网能让你的小众兴趣找到观众<br>
互联网可以让你低成本的「走出去」，找到属于自己的观众。然后你通过创建业务、创造产品、积累财富，你通过在互联网上展现独特的你让大众获得快乐。你事业的发展空间就会因互联网而扩大。</p>
</li>
<li>
<p>通过做自己来规避无意义的竞争<br>
大家都觉得模仿简单，但其实模仿远比你做自己要难。所以不要纯模仿，不要纯复制，专注于做自己的事情，当你真正在做自己时，你就会发现没有人能和你竞争，就是这么简单。<br>
因此，你对你自己是谁和你喜欢做什么认识的越深入，你就会面临越少的竞争。</p>
</li>
</ul>
<h1 id="寻找财富游戏中的长期战友">寻找财富游戏中的长期战友</h1>
<p>选择一个你可以和长期伙伴玩长期游戏的行业，所有的回报都来自于多次游戏的复利。</p>
<ul>
<li>
<p>寻找财富游戏中的长期战友<br>
事实上，生活中所有的收益都来自于复利。<br>
不管是善意、爱情、人际关系还是金钱。<br>
为什么致富是一场持久战？长期博弈不仅对复利有利，对信任也有利。</p>
</li>
<li>
<p>当你转行时，你是在从零开始</p>
</li>
<li>
<p>长期游戏中，每个人都在让彼此更富有<br>
在长期游戏中，似乎每个人都在让彼此更富有。而在短期游戏中，似乎每个人都在让自己更富有。</p>
</li>
<li>
<p>收益来自重复游戏的复利<br>
当你与一个相处了十年，二十年，三十年的老友做生意时，你根本不需要信任他，事情也可以做得越来越好。因为在相处过程中摩擦逐渐减弱，你们可以一起做越来越大的事情。</p>
</li>
</ul>
<p>举个极端的例子，最简单的方法是与某人结婚，生孩子然后养孩子，这就是复利（笑）。投资于这些长期的关系，与更随意的关系相比，这些关系最终是无价的。</p>
<p>在健康和健身方面也是如此。 你的身体越健康，保持健康就越容易。 而你的身体恶化的越多，就越难回到正常的水平。</p>
<h1 id="选择智慧-精力充沛和正直的合作伙伴">选择智慧、精力充沛和正直的合作伙伴</h1>
<ul>
<li>
<p>选择高智商、精力和正直的商业伙伴<br>
你需要和聪明的人共事，至少他们不是在错误的方向上一路向西。你需要与精力充沛的人共事，因为世界上到处都是聪明却懒惰，光想不干的人。在生活中，我们都认识一些非常聪明的人，他们可以不起床，或者动一动手指就完成很多事情。我们也知道有些人精力很旺盛，但并不聪明，他们工作非常非常努力，但有时在朝着错误的方向埋头苦干。<br>
做一件事情的动力终究来自于你自己到底想做什么，觉得什么有意义，而不是为了讨好别人。</p>
</li>
<li>
<p>动机必须是内在的<br>
但如果你想让人们长期保持动力，这种动力必须是内在的。你不能只是创造它，如果他们没有内在的动力，你也不能成为他们的拐杖。所以，你必须确保员工精力充沛，愿意做你希望他们做的事，愿意和你一起工作，一起创造。</p>
</li>
<li>
<p>诚信反映在一个人的行为，而不是他说了什么</p>
</li>
<li>
<p>自尊是你对自己的评价</p>
</li>
</ul>
<h1 id="与理性的乐观主义者合作">与理性的乐观主义者合作</h1>
<ul>
<li>
<p>不要与悲观主义者为伍<br>
本质上，要创造事物，你必须是一个理性的乐观主义者。理性的意思是你必须看清世界的真相。但你必须对自己的能力保持乐观，对自己想要完成的使命保持乐观。<br>
我认识的所有真正成功的人都有很强的行动力，他们只是做事。判断一件事是否可行的最简单方法就是去做，至少做第一步，第二步，第三步，然后再决定下一步。<br>
因此，如果你想在生活中取得成功，创造财富，或者拥有良好的人际关系，或者保持健康，甚至是快乐，你需要有一种超强的行动力，这样才能获得你想要的。</p>
</li>
<li>
<p>与理性的乐观主义者合作<br>
因此，最好还是想得远一点。当然还是要理性地，在你的能力范围内保持乐观。</p>
</li>
<li>
<p>我们是悲观主义者的后代<br>
历史上，如果你回到2000年，5000年，10000年，两个人在丛林中漫步，他们听到了老虎的声音。一个是乐观主义者，说，“哦，它不是朝我们这边来的。另一个说：“我是个悲观主义者，我要离开这里。”悲观的人跑了，活了下来，乐观的人被吃掉了。<br>
我们是悲观主义者的后代，我们天生就是悲观主义者。但现代社会要安全得多，没有老虎在街上游荡，虽然你应该避免彻底破产，但你最终不太可能一无所有。<br>
他的境遇是有下限的，但上限却很难说（白话说是你很难饿死，但是成功却不可限量）<br>
因此，适应现代社会意味着要克服你的悲观情绪，做出稍微不理性的乐观押注<br>
你必须注意的一件事就是，不要做任何违法的事情，远离可能会带来灾难性的损失的事。尽可能不做对身体有害的事情，注意你的健康。远离那些会让你失去所有资本和储蓄的事情。</p>
</li>
</ul>
<h1 id="用特殊技能specific-knowledge武装自己">用特殊技能（Specific knowledge）武装自己</h1>
<p>大部分情况下你想学的东西，要么来源于你的兴趣或DNA，要么是源于你从小养成的一些习惯，这些在之后非常难被“教”会；<br>
因此特殊技能就是你特别关注的技能，尤其是你已经到了20、21、22之后，你几乎就不用去选你需要什么样的特殊技能了。你需要做的就是回顾之前的人生经历中，你建立了什么样的技能是你觉得可以着重被发展的。</p>
<ul>
<li>
<p>特殊技能无法被训练出来</p>
</li>
<li>
<p>特殊技能与你的兴趣高度相关<br>
你会发现更多的特殊技能是通过认识到你的天赋、你真正的好奇心和你的热情而建立起来的。</p>
</li>
<li>
<p>特殊技能往往处于知识的边缘<br>
它也是一些刚刚被发现或者很难被发现的东西。因此，如果你不是100%的投入，其他人会比你做得更好。<br>
如果你的杠杆率为1000倍，有人在80％的时间都是正确的，而其他人在90％的时间都是正确的，那么90％的时间正确的人将因为市场的杠杆作用和复利获得数百倍的报酬。因此，如果你想确保自己在这方面具有优势，真正具有好奇心非常重要。</p>
</li>
<li>
<p>建立特殊技能对你来说就像游戏</p>
</li>
</ul>
<h1 id="特殊技能specific-knowledge极富创造性或技术性">特殊技能（specific knowledge）极富创造性或技术性</h1>
<ul>
<li>
<p>特殊技能能通过课程传授获得<br>
这就是为什么最好的企业、最好的职业是学徒或自学的职业，因为这些都是社会还没有弄清楚如何培训以及使其批量自动生产的事情。</p>
</li>
<li>
<p>特殊的技能具有高度的创造性或者技术性</p>
</li>
<li>
<p>特殊的技能特定于个体和情境</p>
</li>
<li>
<p>特殊技能不能刻意获得<br>
因此，在三四件事上成为前25%要比在某件事上成为世界第一容易得多。</p>
</li>
<li>
<p>在你擅长的领域建立自己的特殊技能</p>
</li>
</ul>
<h1 id="学会销售学会建造">学会销售，学会建造</h1>
<ul>
<li>
<p>学会销售，学会建造</p>
</li>
<li>
<p>硅谷模式：建造者+销售者=最佳拍档</p>
</li>
<li>
<p>如果你两者都能做到，你将势不可挡</p>
</li>
<li>
<p>宁愿教工程师销售，也不愿教营销人员工程？<br>
举个例子，假设你是一个很棒的工程师，然后人们会说，你需要擅长销售。你可能不擅长上门推销东西，但你可能是一个很好的作家。写作是一种比面对面销售门槛更低的技能，所以你可以培养写作技能，直到你成为一个良好的在线交流者，然后将其运用在你的销售上。另一种情况，你可能是一个很好的建造者，但你不擅长写作，你不喜欢与大众沟通，但你擅长一对一说服，所以你可能会用你的销售技能来招聘或募资，这需要更多一对一方向的努力。<br>
你可以从建造开始，然后过渡到销售。</p>
</li>
</ul>
<h1 id="阅读你所热爱的内容-直到你爱上阅读">阅读你所热爱的内容 直到你爱上阅读</h1>
<ul>
<li>
<p>阅读你所热爱的内容 直到你爱上阅读<br>
没有所谓的商业技能。少读商业杂志和商业课程，学习微观经济学、博弈论、心理学、说服力、伦理学、数学和计算机<br>
你应该可以从容的拿起图书馆里的任何一本书来读。<br>
阅读比听快，做比看快。<br>
读书不是目的，重要的是学会如何教育自己，教育自己的方法就是培养对阅读的热爱。<br>
读你喜欢的内容，直到你爱上阅读。</p>
</li>
<li>
<p>阅读某一领域的科学原著<br>
比如，与其读一本商业畅销书，不如读亚当·斯密的《国富论》。与其读今天谁写的一本关于生物学或进化论的书，我更愿意读达尔文《物种起源》。与其现在读一本可能非常先进的生物技术方面的书，我只想学习Horace F. Judson的《创世第八天》(The Eighth Day of Creation)。你不必死磕关于宇宙学和尼尔·德格拉斯·泰森和斯蒂芬·霍金一直在说什么的高级书籍，你需要的是拿起理查德·费曼的《费曼讲物理：入门》，从基础物理学开始。</p>
</li>
<li>
<p>不要害怕任何书<br>
你有一套自己的方法论，分辨哪些是逻辑和科学的</p>
</li>
<li>
<p>学习的手段是丰富的，学习的欲望是稀缺的<br>
你需要创造力，你需要有激励自己的大脑去学习你想要的东西的能力。</p>
</li>
</ul>
<h1 id="数学和逻辑才是一切事物的基础">数学和逻辑才是一切事物的基础</h1>
<ul>
<li>
<p>终极基础是数学和逻辑<br>
如果你懂逻辑和数学，那么你就有了理解科学方法的基础。一旦你理解了科学方法，你就能理解如何在其他领域和其他你正在阅读的东西中区分真理和谬误。</p>
</li>
<li>
<p>速食一百本书毫无意义</p>
</li>
<li>
<p>学习讲故事和编程<br>
我认为五个最重要的技能是，阅读，写作，算术，然后加上说服的技巧，也就是会讲故事（storytelling）让别人信服。最后，我还要加上计算机编程</p>
</li>
</ul>
<h1 id="没有被称为商业的技能">没有被称为“商业”的技能</h1>
<ul>
<li>
<p>没有被称为“商业”的实际技能<br>
我并不想完全贬低商学院传授的东西的价值，他们会传授非常聪明的东西—一些成功的案例/轶事，并称之为“案例分析”（case study）。但它们只是一些趣闻轶事，它们试图通过向你抛出大量数据点来帮助你进行模式匹配，但事实是，在你设身处地思考之前，你永远不能完全理解它们，就像你无法重复打造一个可口可乐一样。但是，你会发现博弈论、心理学、伦理学、数学、计算机和逻辑学中的这些基本概念才会更好地帮到你。这也是我为什么会更专注于基础科学、基础逻辑的原因。<br>
因为很多微妙的东西在你真正进入这个行业之前是不会真正懂得的。<br>
你可以学习所有不同的心理模式。但哪个更重要？你更常应用哪些？在什么情况下哪一个更重要？这其实是最难的部分。<br>
学习博弈论的最好方法是自己设计游戏</p>
</li>
<li>
<p>“执行”迭代的次数决定着你的学习曲线</p>
</li>
<li>
<p>如果你愿意每天流一点血，你可能在未来的人生路上赢得很多</p>
</li>
</ul>
<h1 id="勇敢承担责任才能获得影响力">勇敢承担责任才能获得影响力</h1>
<ul>
<li>
<p>你需要通过责任获得影响力<br>
所以要想发财，你需要杠杆。杠杆来自于劳动力、资本，也可能是通过代码和媒体。但其中的大多数，比如劳动力和资本，必须来自于他人的给予。对于劳动力，必须是有人愿意跟随你；对于资本，必须有人给你钱或资产来让你管理和使用。</p>
</li>
<li>
<p>以自己的名义承担商业风险</p>
</li>
<li>
<p>一个运作良好的团队对每个职位都有明确的责任分工</p>
</li>
<li>
<p>能在公众面前坦然面对失败的人都有很大的能量</p>
</li>
</ul>
<h1 id="冷静的头脑健康的身体充满爱的家庭">冷静的头脑，健康的身体，充满爱的家庭</h1>
<ul>
<li>
<p>平静的头脑，健康的身体和充满爱的家庭必须要经营</p>
</li>
<li>
<p>很多离婚案例是为了钱，很多争吵是因为内心恐惧<br>
很多外在的纷争主要是因为你的内在状态不好。当你内心自然平静的时候，你会选择更少的争斗，你会变得更有爱心而不期待任何回报，这会让你应对外部关系更加得心应手。</p>
</li>
</ul>
<h1 id="没有什么快速致富的方法">没有什么快速致富的方法</h1>
<h1 id="每个创始人都会对他的员工撒谎">每个创始人都会对他的员工撒谎</h1>
<p>于是我开始尝试一些保持诚实的方法，我招募了一些有企业家精神的员工，然后告诉他们，“你们可以在这个公司成为企业家，当你们准备好开始自己的事业的那一天，我将支持你们。我永远不会妨碍你创业。但在你想开始一些新东西之前，这里可能是一个好地方，让你学习如何构建一个良好的团队，建立一个好的企业文化，通过打磨自己的技能找到适合的产品市场，见更多更加优秀的人、和他们交流碰撞，直到最终想通自己到底想做什么。因为定位、时机、以及必要的深思熟虑，在开始创业时很重要。”</p>
<h1 id="产品化你自己">产品化你自己</h1>
<p>找出你最擅长的，并尽可能多地运用杠杆<br>
你要弄清楚你有什么特别擅长的，或者你有什么特别之处，然后尽可能地运用杠杆。在这种情况下你不是在刻意赚钱，赚钱甚至也不是一种技能。你就是在做你自己，探索成千上百种方式找到真正的你。</p>
<ul>
<li>找到让你富有、健康和有创造力的爱好<br>
我会说，找到三个爱好，一个让你赚钱，一个让你健康，一个让你更聪明。<br>
那些早年发现冲浪、游泳、网球或某种他们一生中大部分时间都在做的运动的人是非常幸运的，因为他们发现了一种使他们健康的爱好。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[tencent video business]]></title>
        <id>http://git.alang.run/post/tencent-video-business/</id>
        <link href="http://git.alang.run/post/tencent-video-business/">
        </link>
        <updated>2021-01-10T02:07:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="变现思路">变现思路</h1>
<ul>
<li>卖网课变现<br>
情商、职场、心理、视频、Excel、编程等</li>
<li>电商推广变现<br>
淘宝、京东、拼多多等电商淘宝客联盟</li>
<li>付费阅读变现<br>
引流到订阅号中的付费阅读文章</li>
<li>小说或动漫变现<br>
小说动漫分销平台，一般流量主分成比例很高的</li>
<li>推荐信用卡变现<br>
推荐办理各个银行的信用卡拿返佣</li>
<li>视频号工具或培训变现<br>
视频编辑工具，视频号培训材料</li>
<li>各类歌单打包U盘变现<br>
盗版音频+U盘实物</li>
<li>起名变现<br>
信息差，本质应该都是网上找的软件</li>
<li>共享帐号变现<br>
同一个帐号供多个人用，比如Steam帐号</li>
<li><strong>小程序变现</strong><br>
引流到小程序后通过直接付费或广告联盟变现</li>
<li>互赞群变现<br>
收费进群互赞互关群</li>
</ul>
<h1 id=""></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[创建Springboot+Redis+NodeJs项目的Docker镜像]]></title>
        <id>http://git.alang.run/post/chuang-jian-springbootredisnodejs-xiang-mu-de-docker-jing-xiang/</id>
        <link href="http://git.alang.run/post/chuang-jian-springbootredisnodejs-xiang-mu-de-docker-jing-xiang/">
        </link>
        <updated>2020-10-08T01:18:50.000Z</updated>
        <summary type="html"><![CDATA[<p>考虑到应用<a href="http://music.alang.run">一起听歌吧</a> 开源地址：<a href="https://github.com/JumpAlang/Jusic-Serve-Houses">https://github.com/JumpAlang/Jusic-Serve-Houses</a><br>
后期可能要迁移服务器，也为了方便一起听歌吧的小伙伴在自己的服务器部署，制作一起听歌吧Docker镜像刻不容缓。</p>
]]></summary>
        <content type="html"><![CDATA[<p>考虑到应用<a href="http://music.alang.run">一起听歌吧</a> 开源地址：<a href="https://github.com/JumpAlang/Jusic-Serve-Houses">https://github.com/JumpAlang/Jusic-Serve-Houses</a><br>
后期可能要迁移服务器，也为了方便一起听歌吧的小伙伴在自己的服务器部署，制作一起听歌吧Docker镜像刻不容缓。</p>
<!-- more -->
<h1 id="认识docker">认识Docker</h1>
<blockquote>
<p>以下内容摘抄自阮一峰博客<a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程</a>，建议之前没有使用过docker的小伙伴先看下，我也是看这篇入门的。</p>
</blockquote>
<p>2013年发布至今， Docker 一直广受瞩目，被认为可能会改变软件行业。<br>
软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p>
<p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p>
<p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：&quot;它在我的机器可以跑了&quot;（It works on my machine），言下之意就是，其他机器很可能跑不了。</p>
<p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来</p>
<h2 id="docker是什么">Docker是什么</h2>
<p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p>
<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>
<p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>
<h2 id="docker的用途">Docker的用途</h2>
<p>Docker 的主要用途，目前有三大类。</p>
<p>（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p>
<p>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p>
<p>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p>
<h1 id="镜像创建">镜像创建</h1>
<p>一起听歌吧项目主要可以拆分成三个镜像：</p>
<ol>
<li><strong>音乐接口api</strong>  一起听歌吧的音乐资源，包括网易、QQ、咪咕、铜钟（主要从酷我虾米找寻音乐），基础镜像：NodeJs</li>
<li><strong>Redis</strong> 一起听歌吧的数据服务，基础镜像：Redis</li>
<li><strong>一起听歌吧主程序</strong> 一起听歌吧的业务逻辑，依赖前面两个镜像，基础镜像：Java</li>
</ol>
<h2 id="音乐接口api制作">音乐接口api制作</h2>
<ol>
<li>准备<br>
把各个已经编译且可运行的音乐api代码（<em>包括node_modules</em>）拷贝到统一一个文件夹，方便进行shell操作。</li>
<li>编写Dockerfile<br>
之前看到一篇博客：<a href="https://zhuanlan.zhihu.com/p/130738206">nodejs 应用打包docker创建精简1G多镜像</a>，说NodeJs镜像很大,于是按照文章教程在本地制作了一个NodeJs基础镜像node_base</li>
</ol>
<pre><code class="language-shell">FROM node_base:latest #精简的NodeJs基础镜像，上文有说到

WORKDIR /app  #镜像的工作目录
COPY ./NeteaseCloudMusicApi ./NeteaseCloudMusicApi #把我本地的文件拷贝到镜像/app目录下
COPY ./QQMusicApi ./QQMusicApi
COPY ./MiguMusicApi ./MiguMusicApi
COPY ./tongzhongForJusic ./tongzhongForJusic

COPY ./entrypoint.sh .  #启动各个音乐api的脚本也要拷贝过去
RUN chmod +x ./entrypoint.sh #赋予脚本可执行权限

ENV QQ 1040927107  #qq音乐的环境变量：qq号，如果外部有配置-e QQ的环境变量，这里将被覆盖

ENTRYPOINT sh ./entrypoint.sh $QQ  #容器启动时执行的命令，这里是执行entrypoint.sh
EXPOSE 3000  #暴露端口给宿主机
EXPOSE 3300
EXPOSE 3400
EXPOSE 8081
</code></pre>
<ol start="3">
<li>编写entrypoint.sh 脚本</li>
</ol>
<pre><code class="language-Shell">#!/bin/bash
cd ./NeteaseCloudMusicApi #跳转容器相应目录
nohup node app.js &amp;  #执行启动音乐api命令，nohup指在后台运行
cd ../MiguMusicApi
nohup npm start &amp;
cd ../tongzhongForJusic
nohup npm run server &amp;
cd ../QQMusicApi
PORT=3300 QQ=$1 npm start  #$1,是指执行命令传递过来的第二个参数，第一个参数是entrypoint.sh，第二个参数是qq号
#记得这里不能加nohup让程序在后台运行，因为如果所有应用都在后台运行，docker会自动把这个容器给关闭了。
</code></pre>
<p><em>在windows下编写的脚本，回车可能导致在linux运行不了，建议在linux下编写脚本完拷贝过来</em></p>
<ol start="4">
<li>
<p>创建镜像<br>
<code>docker image build -t jusic_music_api:1.0 .</code></p>
</li>
<li>
<p>本地运行测试<br>
<code>docker run --name jusic_music_api -e QQ=1040927107 -p 3000:3000 -p 3300:3300 -p 3400:3400 -p 8081:8081 -d jusic_music_api:1.0</code><br>
运行后执行<code>docker ps</code>查看容器是否运行或者访问任一音乐api（如浏览器不能访问：<a href="localhost:3000">localhost:3000</a>，则说明没启动成功，可以使用docker命令查看日记：<code>docker logs jusic_music_api</code>，或者在entrypoint.sh添加一些辅助日记，如<code>echo pwd &gt; test.txt</code>）,<br>
进入容器内部执行命令：<code>docker exec -it jusic_music_api sh</code>。</p>
</li>
<li>
<p>发布镜像<br>
如果测试一切运行正常，那就可以把镜像发布至docker官方。<br>
一.  登录<br>
<code>docker login</code><br>
二.  为本地的 image 标注用户名和版本<br>
<code>docker image tag jusic_music_api:1.0 jumpalang/jusic_music_api:1.0</code><br>
三. 发布镜像<br>
<code>docker image push jumpalang/jusic_music_api:1.0</code><br>
四. 完善镜像详细信息<br>
访问官方镜像网站<a href="http://hub.docker.com">http://hub.docker.com</a>，填写镜像的描述信息及详细信息</p>
</li>
</ol>
<h2 id="一起听歌吧主程序镜像制作">一起听歌吧主程序镜像制作</h2>
<ol>
<li>准备<br>
一. 为了不额外的部署前端页面，把前端页面放到后端的<code>resources/static</code>目录下。并在security模块放开相应静态资源路径。<br>
二. 把<code>application.yml</code>的系统相关配置参数化，方便通过环境变量直接配置，如房间数<code>house_size: ${HouseSize:32}</code>,如果没设置环境变量默认就是32，如果运行容器时有设置<code>-e HouseSize=64</code>,则房间数变为64。</li>
<li>编写Dockerfile</li>
</ol>
<pre><code class="language-Shell">FROM java:8
EXPOSE 8888
WORKDIR /app
ADD target/jusic-serve.jar ./jusic-serve.jar

ENV APIUSER=admin APIPWD=123456 RedisHost=redis MusicApi=http://jusicMusicApi
ENV MusicExpireTime=1200000 ReTryCount=1 VoteRate=0.3 WyTopUrl=3778678
ENV ServerJUrl=https://sc.ftqq.com/SCU64668T909ada7955daadfb64d5e7652b93fb135dad06e659369.send
ENV IpHouse=3 HouseSize=32

# 这边不要以nohup方式运行，不然容器会被docker自动关闭
ENTRYPOINT java -jar -DAPIUSER=$APIUSER -DAPIPWD=$APIPWD -DRedisHost=&quot;$RedisHost&quot; -DMusicApi=&quot;$MusicApi&quot; -DMusicExpireTime=$MusicExpireTime -DReTryCount=$ReTryCount -DVoteRate=$VoteRate -DWyTopUrl=$WyTopUrl -DServerJUrl=&quot;$ServerJUrl&quot; -DIpHouse=$IpHouse -DHouseSize=$HouseSize ./jusic-serve.jar
</code></pre>
<p><strong>参数说明</strong></p>
<ul>
<li>接口认证用户名：APIUSER，默认admin</li>
<li>接口认证密码：APIPWD 默认123456</li>
<li>Redis Host:RedisHost 默认redis，如果不是docker启动的redis，在本地可以直接填写localhost</li>
<li>音乐api host:MusicApi 默认http://jusicMusicApi,与你link的音乐api别名要保持一致，如果不是docker启动的音乐api，在本地可以填写 http://localhost</li>
<li>音乐链接过期时间：MusicExpireTime 默认1200000毫秒</li>
<li>获取音乐失败重试次数：ReTryCount 默认1次</li>
<li>投票切歌率：VoteRate 默认0.3</li>
<li>网易热歌榜歌单id：WyTopUrl 默认3778678</li>
<li>个人Server酱接口：ServerJUrl 默认https://sc.ftqq.com/SCU64668T909ada7955daadfb64d5e7652b93fb135dad06e659369.send，必须修改，否则当有用户@管理员时，消息会发到我这里</li>
<li>每个ip限制创建房间数：IpHouse 默认3个</li>
<li>系统最多可创建房间数：HouseSize 默认32个</li>
</ul>
<ol start="3">
<li>
<p>创建镜像<br>
<code>docker image build -t jusic_serve_houses:1.0 .</code></p>
</li>
<li>
<p>本地运行测试<br>
运行前要先拉取及运行redis及音乐api镜像<em>jusic_music_api</em><br>
<code>docker run --name jusic_serve_houses -e APIPWD=123 -e MusicApi=&quot;http://musicApi&quot; -p 8888:8888 -d --link redis:redis --link jusic_music_api:musicApi jusic_serve_houses:1.0</code><br>
浏览器访问<a href="localhost:8888">localhost:8888</a>查看效果，如果没启动成功，可以使用docker命令查看日记：<code>docker logs jusic_serve_houses</code>。进入容器内部执行命令：<code>docker exec -it jusic_serve_houses /bin/bash</code></p>
</li>
<li>
<p>发布镜像<br>
如果测试一切运行正常，那就可以把镜像发布至docker官方。<br>
一.  登录<br>
<code>docker login</code><br>
二.  为本地的 image 标注用户名和版本<br>
<code>docker image tag jusic_serve_houses:1.0 jumpalang/jusic_serve_houses:1.0</code><br>
三. 发布镜像<br>
<code>docker image push jumpalang/jusic_serve_houses:1.0</code><br>
四. 完善镜像详细信息<br>
访问官方镜像网站<a href="http://hub.docker.com">http://hub.docker.com</a>，填写镜像的描述信息及详细信息</p>
</li>
</ol>
<h2 id="使用docker-compose一键启动项目">使用docker-compose一键启动项目</h2>
<p>上一步骤运行一起听歌吧应用还比较麻烦，要自己先启动音乐api及redis，使用docker-compose就可以很方便的运行起整个项目，如未使用过docker-compose建议先看看阮一峰博客的这篇文章：<a href="http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html">Docker 微服务教程</a></p>
<ol>
<li>
<p>编写docker-compose.yml</p>
<pre><code class="language-Shell">version: &quot;3&quot;
services:
 service_redis:
     restart: always #异常关闭后会再自动重启
     #    ports:
     #      - 6379:6379   #可以不暴露给宿主机
     image: redis
     container_name: redis
     environment:
         - TZ=Asia/Shanghai
     command: redis-server
     volumes:
         - D:\docker\redis\data:/data  #redis数据挂载到本地，不然重启容器数据就丢失了
 service_jusicMusicApi:
     image: jumpalang/jusic_music_api:1.0
     environment:
         - QQ=1040927107 #qq号
     container_name: jusicMusicApi
     ports:
         #      - &quot;3000:3000&quot;
         - &quot;3300:3300&quot;  #qq音乐接口要暴露给宿主机，因为有可能要设置cookie
         #      - &quot;3400:3400&quot;
         #      - &quot;8081:8081&quot;
     restart: always
 service_jusicServeHouses:
     container_name: jusicServeHouses
     image: jumpalang/jusic_serve_houses:1.0
     environment:
         - MusicApi=http://jusicMusicApi  #必须与service_jusicMusicApi的 container_name一致
         - APIUSER=admin  #api认证接口用户名
         - APIPWD=123456  #api认证接口密码
         - ServerJUrl=https://sc.ftqq.com/SCU64668T909ada7955daadfb64d5e7652b93fb135dad06e659369.send #server酱消息接口，用户@管理员时会通知微信
     # 其他要设置的环境变量都可在此设置
     ports:
         - &quot;8888:8888&quot;
     depends_on:
         - service_redis
         - service_jusicMusicApi
     restart: always
</code></pre>
</li>
<li>
<p>本地运行测试<br>
<code>docker-compose up -d</code>, 启动相关容器，<em>-d</em>参数使得容器在后台运行。<br>
<code>docker-compose stop</code> 关闭相关容器<br>
<code>docker-compose rm</code> 删除相关容器</p>
</li>
</ol>
<h1 id="docker其他常用命令">docker其他常用命令</h1>
<ul>
<li>
<p>列出本机的所有 image 文件。<br>
<code>docker image ls</code></p>
</li>
<li>
<p>拉取镜像至本地<br>
<code>docker image pull library/hello-world</code><br>
library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。<br>
由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。</p>
</li>
<li>
<p>删除 image 文件<br>
<code>docker image rm [imageName]</code></p>
</li>
<li>
<p>列出本机正在运行的容器<br>
<code>docker container ls</code></p>
</li>
<li>
<p>列出本机所有容器，包括终止运行的容器<br>
<code>docker container ls --all</code></p>
</li>
<li>
<p>启动容器<br>
<code>docker container start [containerID]</code><br>
<code>docker container run</code>命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。</p>
</li>
<li>
<p>关闭容器<br>
<code>docker container stop [containerID]</code><br>
<code>docker container kill</code>命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而<code>docker container stop</code>命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。<br>
这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。</p>
</li>
<li>
<p>删除容器<br>
<code>docker container rm [containerID]</code></p>
</li>
</ul>
<h1 id="总结">总结</h1>
<ol>
<li>制作镜像时，切记不能让所有应用都在后台运行，要保持一个在前台运行</li>
<li>docker还停留在表面使用，参数详细作用或者参数之间的区别还未了解，如links与depends_on区别</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[开源的优秀后端管理系统]]></title>
        <id>http://git.alang.run/post/kai-yuan-de-you-xiu-hou-duan-guan-li-xi-tong/</id>
        <link href="http://git.alang.run/post/kai-yuan-de-you-xiu-hou-duan-guan-li-xi-tong/">
        </link>
        <updated>2020-09-27T02:08:54.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>寻觅时间：2020/9/27</strong></p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>寻觅时间：2020/9/27</strong></p>
<!-- more -->
<h1 id="寻觅1">寻觅1</h1>
<p>从公众号<code>Java技术驿站</code>看到一篇文章<a href="%22https://mp.weixin.qq.com/s/KfToO7xDzbHLva7rvwCOqQ%22">这 5 个能挣钱的 SpringBoot 项目，真TMD香！</a>，正好我也有想找个可以快速开发的通用后台系统模板。<br>
其中两个吸引了我的注意： <a href="%22https://gitee.com/lab1024/smart-admin%22">SmartAdmin</a> <code>start 1k fork 400</code> 和 <a href="%22https://gitee.com/aun/Timo%22">Timo</a>,<code>start 1.6k fork 673</code>。</p>
<h2 id="项目详情">项目详情</h2>
<h3 id="smartadmin">SmartAdmin</h3>
<ul>
<li>前端：Vue + Vue-Router + Vuex + ViewUI + vue-enum</li>
<li>后端：SpringBoot2 + Mybatis-plus + jwt + druid + mysql</li>
</ul>
<blockquote>
<p>在线预览 <a href="http://preview.smartadmin.1024lab.net">http://preview.smartadmin.1024lab.net</a><br>
<code>start 1k fork 400</code>    <code>前后端分离</code>  <code>前后端代码规范文档</code> <code>维护中</code> <code>始于2019-11-16</code> <code>5天前更新</code></p>
</blockquote>
<h3 id="timo">Timo</h3>
<ul>
<li>
<p>前端：Layui + Jquery + zTree + Font-awesome</p>
</li>
<li>
<p>后端：SpringBoot + Spring Data Jpa + Thymeleaf + Shiro + Jwt + EhCache</p>
<blockquote>
<p>在线预览 <a href="http://demo.linln.cn">http://demo.linln.cn</a><br>
<code>start 1.6k fork 673</code>  <code>前后端分离</code>  <code>移动端适配</code> <code>维护中</code> <code>始于2018-10-12</code> <code>3天前更新</code></p>
</blockquote>
<h1 id="寻觅2">寻觅2</h1>
</li>
</ul>
<p>因为之前都习惯于在github搜索开源项目，但从github clone项目很慢，发现上面提到的项目都有提供gitee的项目地址，于是转站gitee clone项目。<br>
出于好奇，我也在gitee上搜索了<code>后台管理</code>，然后筛选<em>java</em>项目，发现了另一个优秀的项目<a href="https://gitee.com/elunez/eladmin">eladmin</a> <code>start 3.3k fork 1.8k</code></p>
<h2 id="项目详情-2">项目详情</h2>
<h3 id="eladmin">eladmin</h3>
<ul>
<li>前端：Vue + ElementUI</li>
<li>后端:  Spring Boot 2.1.0 +Spring Boot Jpa+ JWT+Spring Security+Redis + Mysql
<blockquote>
<p>在线预览 <a href="https://el-admin.xin/">https://el-admin.xin/</a><br>
<code>start 3.3k fork 1.8k</code>  <code>前后端分离</code>  <code>移动端适配</code> <code>维护中</code> <code>始于2018-12-22</code> <code>6天前更新</code></p>
</blockquote>
</li>
</ul>
<h1 id="总结">总结</h1>
<p>从我自身出发，我倾向于使用mybatis操作数据。于是smartAdmin成为了选择，但是它移动端不适配。想想是不是也可以尝试下spring jpa，没错，那就从eladmin开始吧。而对于Timo很适合于自己赚外快接单使用，可以不前后端分离，方便部署……</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pm2的简单使用]]></title>
        <id>http://git.alang.run/post/pm2-de-jian-dan-shi-yong/</id>
        <link href="http://git.alang.run/post/pm2-de-jian-dan-shi-yong/">
        </link>
        <updated>2020-08-07T07:44:25.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>日常开发中需要启动一个node项目，需要用npm run …,，如果终端被关掉，程序也就自动停止，有时候几个项目一起跑起来，好几个终端开着，个人不太喜欢，有一神器可以解决：pm2。pm2 是一个带有负载均衡功能的Node应用的进程管理器.当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。它非常适合IaaS结构，但不要把它用于PaaS方案。</p>
</blockquote>
<h1 id="启动应用并设置别名">启动应用并设置别名</h1>
<ol>
<li>没有app.js的启动方法(<em>有app.js但启动不了时也可以用这个</em>)<br>
<code>pm2 start npm -- name 别名 -- run start</code></li>
<li>有app.js<br>
<code>pm2 start app.js --name 别名</code></li>
</ol>
<h1 id="查看应用列表">查看应用列表</h1>
<p><code>pm2 list</code></p>
<h1 id="删除应用">删除应用</h1>
<p><code>pm2 delete 序号|别名</code></p>
<h1 id="重启应用">重启应用</h1>
<p><code>pm2 restart 序号|别名</code></p>
<h1 id="停止应用">停止应用</h1>
<p><code>pm2 stop 序号|别名</code></p>
]]></content>
    </entry>
</feed>